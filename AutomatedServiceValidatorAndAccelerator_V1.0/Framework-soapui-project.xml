<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Framework" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" id="70aa56ac-9aed-4b72-b9b6-765faec84269" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:testSuite name="Call Script" id="e8d9ba62-74c7-47cc-9680-ee5507db89e6">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Call Script" searchProperties="true" id="d0fb644b-6a7c-48b1-ad2d-bae9906bea94">
      <con:settings/>
      <con:testStep type="groovy" name="Call Script" id="7ecf0789-747b-4d02-b282-aade34bd0214">
        <con:settings/>
        <con:config>
          <script>try{
//Set Context for Suite Driver call
	CallScript = testRunner.testCase.testSuite.project.testSuites["Driver"];
	CallScript.testCases["Driver"].testSteps["SuiteDriver"].run(testRunner, context);

//Invoke Suite Driver
	context.SuiteDriver.ExecuteSuiteDriver();
}

catch (Exception e){log.error(' Exception occurred in ExecuteSuiteDriver. Exception Details: ' +e.getMessage())}

finally {
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TotalCount", "");
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("PassCount", "");
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailCount", "");
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("NoRunCount", "");
}</script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite name="Driver" id="f0f1179c-c0ed-43b8-b540-58a0671ea88b">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Driver" searchProperties="true" id="0eb9ed13-84ef-4d6f-9e9b-a0be5f53b0ee">
      <con:settings/>
      <con:testStep type="groovy" name="SuiteDriver" id="930c6a71-283c-4bce-890a-8204464cf9a9">
        <con:settings/>
        <con:config><script><![CDATA[//import all the required libraries.
import java.util.*;
import java.lang.*; 
import java.io.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;

	
//initialize log, testrunner and context for access inside GenericLibraries class
SuiteDriver.log = log;
SuiteDriver.testRunner = testRunner;
SuiteDriver.context = context;

context.setProperty("SuiteDriver", new SuiteDriver());

public class SuiteDriver{
	//define  log, testrunner and context inside class
	def static log;	
	def static testRunner;
  	def static context;

	public static ExecuteSuiteDriver()
		{
		try {
	//Read the config file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath
		def Resultpath; def ReportinFolder; def dReportinFolder
		def ArrayList Executionreportheader = new ArrayList();
		def HashMap ExecutionreportheaderMap = new HashMap();
		def Map<String,String> xlsReportdatacounter=new HashMap();
		int TotalCount=0; int PassCount=0; int FailCount=0; int NoRunCount=0
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TotalCount","0")
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("PassCount","0")
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailCount","0")
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("NoRunCount","0")

		//set report data and time
		def todayStr = new java.text.SimpleDateFormat("MM-dd-yyyy_hhmmss").format(new Date())
		def rtodayStr = new java.text.SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(new Date())
		def stodayStr = todayStr.toString()
		
		//Set GenericLibrary Context .
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);

         //Read Services File path location properties
		String sConfig = projectPath + "/Config/FrameworkProperties.properties"
		def FrameworkProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		String ReportNoRun = FrameworkProperties.get("ReportNoRun");
		log.info " ReportNoRun value is set to " + ReportNoRun +". Hence No Run cases will  be reported accordingly in the Final Execution Report"
		context.GenericLibraries.createProperties("Resultpath", FrameworkProperties.get( "Resultpath" ), "global");
				
		//Import data from FrameworkTemplate file
		def templateFilePath = projectPath + "/SoapUIFrameworkMasterSheet.xlsx"
	     def SuiteData = context.GenericLibraries.importDataSheet('Suite', templateFilePath);
		def RowCount = SuiteData.RowCount
		def ColumnCount=SuiteData.ColumnCount
		String TestCaseName;

		// Call for report headers
   		Executionreportheader = context.GenericLibraries.GetReportHeaders("Arraylist");
   		ExecutionreportheaderMap = context.GenericLibraries.GetReportHeaders("Hashmap");
   	
		//determine column index
		def RowHeader = SuiteData.excelData[0]
		def int TCNamecolumn
		def int TCInfocolumn 
		def int Executeflagcolumn
		def int WorkFlowflagcolumn
		def workflowExecuteFlag ="";
		for (int  c=0; c<ColumnCount;c++)
		{
			if (RowHeader[c].equalsIgnoreCase( "TCName")) {TCNamecolumn = c;}
			else if (RowHeader[c].equalsIgnoreCase("TCInfo")) {TCInfocolumn = c;}
			else if (RowHeader[c].equalsIgnoreCase("Execute")) {Executeflagcolumn = c;	}	
			else if (RowHeader[c].equalsIgnoreCase("WorkFlow")) {WorkFlowflagcolumn = c;}		
		}	

		int Reportrowcnt = 1; //Used when user does has indicated not to report No Run Cases
		if (RowCount!=1) {
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Dictionary","dictDefault=default")
	           for (int i=1; i <RowCount;i++)
	            {
	            	def RowData = SuiteData.excelData[i]
	            	if (RowData[TCNamecolumn].equals(null) || RowData[TCNamecolumn].equals("") ) 	{
	            		log.info(" Encountered a null row in Master file, hence stopping"); 
	            		break;	
	            	}
	            	else {	
	            		//Initialize executionflag and workflowflag    			
	            		String executionflag = RowData[Executeflagcolumn]
	            		String workflowflag = RowData[WorkFlowflagcolumn] 
	            		workflowExecuteFlag = workflowflag;          	
		            	if ((executionflag.trim()).equalsIgnoreCase("Y")) { 
		            		 if ((workflowflag.trim()).equalsIgnoreCase("Y")) {
		            		 	log.info  " Executionflag is set to 'Y' and workflowflag is set to 'Y'"
		            		 	TestCaseName = RowData[TCNamecolumn].trim()
		            			String TCInfo = RowData[TCInfocolumn].trim()
		            			def WorkFlowDriver = testRunner.testCase.testSuite.project.testSuites["Driver"];
							WorkFlowDriver.testCases["Driver"].testSteps["WorkFlowDriver"].run(testRunner, context);
		            			context.WorkFlowDriver.ExecuteWorkFlowDriver(TestCaseName, TCInfo)
		            		 }
		            	  	else {
		            			log.info " Executionflag is set to 'Y' and workflowflag is set to 'N'"
		            			TestCaseName = RowData[TCNamecolumn].trim()
		            			String TCInfo = RowData[TCInfocolumn].trim()
		            			String TCPath="" 
		            			String TCSheet=""
		            			String DatasheetPath=""
		            			String DataSheet=""
		            			String DataID=""
		            			def WorkflowTestCaseDriver = testRunner.testCase.testSuite.project.testSuites["Driver"];
							WorkflowTestCaseDriver.testCases["Driver"].testSteps["TestCaseDriver"].run(testRunner, context);
							context.TestCaseDriver.ExecuteTestCaseDriver(TestCaseName,TCPath, TCSheet, DatasheetPath,DataSheet,DataID,TCInfo);
		            		}
		            	}
		            	else {
		            		if (executionflag.equalsIgnoreCase("N")) { 
		            			TestCaseName = RowData[TCNamecolumn]
		            			if (ReportNoRun.trim().equalsIgnoreCase("yes")) {
		            			Map<String,String> xlsReportdata=new HashMap<String, String>();
		            			log.info  " Executionflag is set to 'N', hence the testcase "+TestCaseName+" at row number '" +  (1+i)  +"'  is not executed"
							// Add all the header Data here, the ExecutionreportheaderMap key should be excatly same as header name
							xlsReportdata.put(ExecutionreportheaderMap.get("TestCaseName")+Reportrowcnt,TestCaseName)
							xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_DataID")+Reportrowcnt,"")
							xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_ExecutionResult")+Reportrowcnt,"No Run")
							xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_FailureReason")+Reportrowcnt,"Executionflag is set to 'N' hence the testcase not executed")
							xlsReportdata.put(ExecutionreportheaderMap.get("Request_XMLPath")+Reportrowcnt,"")
							xlsReportdata.put(ExecutionreportheaderMap.get("Response_XMLPath")+Reportrowcnt,"")	
							xlsReportdata.put(ExecutionreportheaderMap.get("Request_Trigger_Time")+Reportrowcnt,"")	
							xlsReportdata.put(ExecutionreportheaderMap.get("Response_Received_Time")+Reportrowcnt,"")
							xlsReportdata.put(ExecutionreportheaderMap.get("Response_Time(ms)")+Reportrowcnt,"")
							xlsReportdatacounter.put(Reportrowcnt,xlsReportdata)
		            			Reportrowcnt++;
		            			TotalCount++
		            			NoRunCount++
		            			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TotalCount", TotalCount.toString());
		            			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("NoRunCount", NoRunCount.toString());
		            			}
		            			continue;
		            		}
		            		else {
		            			log.info " Unrecognised executionflag indicator in sheet <Suite> at row number " +  (1+i)
		            			Map<String,String> xlsReportdata=new HashMap<String, String>();  
		            			// Add all the header Data here, the ExecutionreportheaderMap key should be excatly same as header name
		            			xlsReportdata.put(ExecutionreportheaderMap.get("TestCaseName")+Reportrowcnt,TestCaseName)
							xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_DataID")+Reportrowcnt,"")
							xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_ExecutionResult")+Reportrowcnt,"")
							xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_FailureReason")+Reportrowcnt,"Unrecognised executionflag indicator in sheet in  row")
							xlsReportdata.put(ExecutionreportheaderMap.get("Request_XMLPath")+Reportrowcnt,"")
							xlsReportdata.put(ExecutionreportheaderMap.get("Response_XMLPath")+Reportrowcnt,"")	
							xlsReportdata.put(ExecutionreportheaderMap.get("Request_Trigger_Time")+Reportrowcnt,"")	
							xlsReportdata.put(ExecutionreportheaderMap.get("Response_Received_Time")+Reportrowcnt,"")
							xlsReportdata.put(ExecutionreportheaderMap.get("Response_Time(ms)")+Reportrowcnt,"")
							xlsReportdatacounter.put(Reportrowcnt,xlsReportdata)
		            			Reportrowcnt++;
		            			TotalCount++
		            			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TotalCount", TotalCount.toString());
		            			continue;
		            		}
		            		}
		            	}
		            	def TCResult = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("TestCaseResult");
		            	def DataID = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("DataID");
					def Reportpath = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Resultpath");     	
		            	if ((Reportpath==null) || (Reportpath=="")) {
			            		//create Test Result Folder
							def TestExecutionReportFolder = projectPath+"\\Test Execution Reports\\"
							File fTestExecutionReportFolder=new File(TestExecutionReportFolder)
							if(fTestExecutionReportFolder.exists()&& fTestExecutionReportFolder.isDirectory()) {log.info  " Test Execution Report Folder exists for capturing Request Response. Path is :" +TestExecutionReportFolder;}
							else { fTestExecutionReportFolder.mkdir();log.info  " Test Execution Report Folder created for capturing Execution Results. Path is :" +TestExecutionReportFolder;}
			            		dReportinFolder= projectPath+"\\Test Execution Reports\\TestRun_"+stodayStr+"\\"
			            		File fReportinFolder=new File(dReportinFolder)
			            		if(fReportinFolder.exists()&& fReportinFolder.isDirectory()) {log.info  " ReportinFolder exists for capturing Execution Report. Path is :" +dReportinFolder;}
			            		else { fReportinFolder.mkdir();log.info  " Resultpath created for capturing Execution Report. Path is :" +dReportinFolder;}
			            	
			            		Resultpath = projectPath+"\\Test Execution Reports\\TestRun_"+stodayStr+"\\"+"Request Response\\"
			            		File fResultpath=new File(Resultpath)
			            		if(fResultpath.exists()&& fResultpath.isDirectory()) {log.info  " Resultpath exists for capturing Request Response. Path is :" +Resultpath;}
			            		else { fResultpath.mkdir();log.info  " Resultpath created for capturing Request Response. Path is :" +Resultpath;}
		            	}
		            	else 
		            	{
							//create Test Result Folder
							def TestExecutionReportFolder = Reportpath
							File fTestExecutionReportFolder=new File(TestExecutionReportFolder)
							if(fTestExecutionReportFolder.exists()&& fTestExecutionReportFolder.isDirectory()) {log.info  " Test Execution Report Folder exists for capturing Request Response. Path is :" +TestExecutionReportFolder;}
							else { fTestExecutionReportFolder.mkdir();log.info  " Test Execution Report Folder created for capturing Execution Results. Path is :" +TestExecutionReportFolder;}

							dReportinFolder= Reportpath+"TestRun_"+stodayStr+"\\"
		            			File fReportinFolder=new File(dReportinFolder)
		            			if(fReportinFolder.exists()&& fReportinFolder.isDirectory()) {log.info  " ReportinFolder exists for capturing Execution Report. Path is :" +dReportinFolder;}
		            			else { fReportinFolder.mkdir();log.info  " Resultpath created for capturing Execution Report. Path is :" +dReportinFolder;}
		            		
							Resultpath=Reportpath+"TestRun_"+stodayStr+"\\Request Response\\"
							File fResultpath=new File(Resultpath)
							if(fResultpath.exists()&& fResultpath.isDirectory()) {log.info  " Resultpath exists for capturing Request Response. Path is :" +Resultpath;}
		            			else {fResultpath.mkdir();log.info  " Resultpath created for capturing Request Response. Path is :" +Resultpath;}
		            	}
				//get current date
				// Add all the header Data here, the ExecutionreportheaderMap key should be excatly same as header name
				Map<String,String> xlsReportdata=new HashMap<String, String>();
				xlsReportdata.put(ExecutionreportheaderMap.get("TestCaseName")+Reportrowcnt,TestCaseName)
				xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_DataID")+Reportrowcnt,TestCaseName+":"+com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("DataID"))
				xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_ExecutionResult")+Reportrowcnt,com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("TestCaseResult"))
				xlsReportdata.put(ExecutionreportheaderMap.get("TestCase_FailureReason")+Reportrowcnt,com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("FailureReason"))
				if ((workflowExecuteFlag.trim()).equalsIgnoreCase("Y")) {
					xlsReportdata.put(ExecutionreportheaderMap.get("Request_XMLPath")+Reportrowcnt,Resultpath+TestCaseName+"_"+'WorkFlowRequest.txt')
					xlsReportdata.put(ExecutionreportheaderMap.get("Response_XMLPath")+Reportrowcnt,Resultpath+TestCaseName+"_"+'WorkFlowResponse.txt')
				} else  {
					xlsReportdata.put(ExecutionreportheaderMap.get("Request_XMLPath")+Reportrowcnt,Resultpath+TestCaseName+"_"+DataID+'Request.txt')
					xlsReportdata.put(ExecutionreportheaderMap.get("Response_XMLPath")+Reportrowcnt,Resultpath+TestCaseName+"_"+DataID+'Response.txt')
				}
					
				xlsReportdata.put(ExecutionreportheaderMap.get("Request_Trigger_Time")+Reportrowcnt,com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("starttime"))	
				xlsReportdata.put(ExecutionreportheaderMap.get("Response_Received_Time")+Reportrowcnt,com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("endtime"))
				xlsReportdata.put(ExecutionreportheaderMap.get("Response_Time(ms)")+Reportrowcnt,com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("ResponseTime"))
				xlsReportdatacounter.put(Reportrowcnt,xlsReportdata)
		          Reportrowcnt++;
		          if (com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("TestCaseResult")=="Pass"){
		          	TotalCount++
		            	PassCount++
		            	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TotalCount", TotalCount.toString());
		            	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("PassCount", PassCount.toString());
		          }
				else if (com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("TestCaseResult")=="Fail") {
					TotalCount++
		            	FailCount++
		            	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TotalCount", TotalCount.toString());
		            	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailCount", FailCount.toString());	
				}
				
			//Writing soapUI request to a text file
			def inputFileRequest
			if ((workflowExecuteFlag.trim()).equalsIgnoreCase("Y")) {
				 inputFileRequest = new File(Resultpath+TestCaseName+"_"+'WorkFlowRequest.txt',)
			} else {
				 inputFileRequest = new File(Resultpath+TestCaseName+"_"+DataID+'Request.txt',)
			}
			 
			    inputFileRequest.append('*******************************************************************************************************' + "\r\n","UTF-8")
			    inputFileRequest.append (TestCaseName+"_"+DataID+'Timestamp : ' + rtodayStr + "\r\n","UTF-8")
			    inputFileRequest.append('*******************************************************************************************************************************************' + "\r\n","UTF-8")
			    inputFileRequest.append( com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Request")+"\r\n","UTF-8")      
			 
			 //Writing soapUI response to a text file
			 def inputFileResponse
			 if ((workflowExecuteFlag.trim()).equalsIgnoreCase("Y")) {
			 	inputFileResponse = new File(Resultpath+TestCaseName+"_"+'WorkFlowResponse.txt')
			 } else {
			 	inputFileResponse = new File(Resultpath+TestCaseName+"_"+DataID+'Response.txt')
			 }
			   
			    inputFileResponse.append('*******************************************************************************************************************************************' + "\r\n","UTF-8")
			    inputFileResponse.append (TestCaseName+"_"+DataID+'Timestamp : ' +rtodayStr + "\r\n","UTF-8")
			    inputFileResponse.append('*******************************************************************************************************************************************' + "\r\n","UTF-8")
			    inputFileResponse.append( com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Response")+"\r\n","UTF-8")   

			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Request", "");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Response", "");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TestCaseResult", "");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("DataID","");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason","");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("ResponseTime","");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FaultCode", "");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("starttime", "");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("endtime", "");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("ServiceInfoFolder", "");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("HTTPCode", "");
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Dictionary","")
			}
		}
		else { 
			log.info " Now Rows present in the sheet. Review and correct 'Suite' Sheet."	
			}
			log.info " xlsReportdatacounter is " + xlsReportdatacounter;
	context.GenericLibraries.GenerateXlReport(dReportinFolder,Executionreportheader,xlsReportdatacounter)		            	
	}
	
	catch(Exception e) { log.error(' Exception occurred in ExecuteSuiteDriver. Exception Details: ' +e.getMessage());}	
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="WorkFlowDriver" id="950b8c0c-6262-4a2f-96cf-99de0bf95448">
        <con:settings/>
        <con:config><script><![CDATA[//Import packages
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import java.io.*;
import java.util.*;
import com.eviware.soapui.*;
import groovy.util.logging.*;
import groovy.io.FileType

//initialize log, testrunner and context for access inside GenericLibraries class
WorkFlowDriver.log = log;
WorkFlowDriver.testRunner = testRunner;
WorkFlowDriver.context = context;

context.setProperty("WorkFlowDriver", new WorkFlowDriver());

public class WorkFlowDriver{
	//define  log, testrunner and context inside class
	def static log;	
	def static testRunner;
  	def static context;

	public static ExecuteWorkFlowDriver(String OrchestratedTCName, String TCInfo="")
	{
		try {
		log.info " ExecuteWorkFlowDriver called for TestCaseWorkflow " +  OrchestratedTCName;

		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;

		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);

		//Read Services File path location properties
		String sConfig = projectPath + "/Config/FrameworkProperties.properties"
		def FrameworkProperties = context.GenericLibraries.readDatafromConfig(sConfig)
	     
		// create the service filename based on ServiceName column from template file
		def workflowFilePath = projectPath + "/SoapUIFrameworkMasterSheet.xlsx"


		def String globalTCPath; def String globalDatasheetPath; def String globalTCSheet; def String globalDataSheet; def String globalDataID;
		def String defaultTCName;  def String defaultTCPath; def String defaultTCSheet; def String defaultDatasheetPath; def String defaultDataSheet; def String defaultDataID;
		def String TCName; def String TCPath; def String TCSheet; def String DatasheetPath; 	def String DataSheet;	def String DataID; def String sTCPath;  def String sDatasheetPath

		globalTCPath = FrameworkProperties.get( "global_TCPath" )
		globalTCSheet = FrameworkProperties.get( "global_TCSheet" )
		globalDatasheetPath = FrameworkProperties.get( "global_DatasheetPath" )
		globalDataSheet=FrameworkProperties.get( "global_DataSheet" )
		globalDataID=FrameworkProperties.get( "global_DataID" )
		log.info " Printing Global Variables: global_TCPath: "+globalTCPath+", global_TCSheet: "+globalTCSheet+", global_DatasheetPath: "+globalDatasheetPath+",global_DataSheet: "+globalDataSheet+",global_DataID: "+globalDataID
							
			String[] default_array = TCInfo.toString().split(";\\n");
			int aSize = default_array.size()
				
				def String[] defaultDetails
				def Map<String, String> defaultTestCaseDetails = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
				for (int i=0; i < aSize ; i++) {
					if ((default_array[i] != "") ) {defaultDetails = default_array[i].toString().split("=");defaultTestCaseDetails.put(defaultDetails[0], defaultDetails[1])}
					else
						{
							defaultTCName=OrchestratedTCName
							defaultTCPath=globalTCPath
							defaultTCSheet=globalTCSheet
							defaultDatasheetPath=globalDatasheetPath
							defaultDataSheet= globalDataSheet
							defaultDataID = globalDataID
						}
					}

					if (defaultTestCaseDetails.containsKey("InConfigfile")){
						defaultTCPath = FrameworkProperties.get(defaultTestCaseDetails.get("InConfigfile")+"_TCPath" )
						defaultTCSheet = FrameworkProperties.get( defaultTestCaseDetails.get("InConfigfile")+"_TCSheet" )
						defaultDatasheetPath = FrameworkProperties.get( defaultTestCaseDetails.get("InConfigfile")+"_DatasheetPath" )
						defaultDataSheet=FrameworkProperties.get( defaultTestCaseDetails.get("InConfigfile")+"_DataSheet" )
						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "ServiceInfoFolder",FrameworkProperties.get( defaultTestCaseDetails.get("InConfigfile")+"_ServiceInfoFolder" ))
						if (defaultTestCaseDetails.containsKey("DataID")) {defaultDataID = defaultTestCaseDetails.get("DataID");}else {defaultDataID = globalDataID}
					}
					else {
					if (defaultTestCaseDetails.containsKey("TCName")) {defaultTCName = defaultTestCaseDetails.get("TCName");}else {defaultTCName=OrchestratedTCName}
					if (defaultTestCaseDetails.containsKey("TCPath")) {defaultTCPath = defaultTestCaseDetails.get("TCPath");} else {defaultTCPath=globalTCPath}
					if (defaultTestCaseDetails.containsKey("TCSheet")) {defaultTCSheet = defaultTestCaseDetails.get("TCSheet");} else {defaultTCSheet=globalTCSheet}
					if (defaultTestCaseDetails.containsKey("DatasheetPath")) {defaultDatasheetPath = defaultTestCaseDetails.get("DatasheetPath");} else{defaultDatasheetPath=globalDatasheetPath}
					if (defaultTestCaseDetails.containsKey("DataSheet")) {defaultDataSheet = defaultTestCaseDetails.get("DataSheet");} else {defaultDataSheet= globalDataSheet}
					if (defaultTestCaseDetails.containsKey("DataID")) {defaultDataID = defaultTestCaseDetails.get("DataID");}else {defaultDataID = globalDataID}
					}
		log.info " Printing Default Variables in Orchestrated execution: defaultTCName: "+defaultTCName+",defaultTCPath: "+defaultTCPath+", defaultTCSheet: "+defaultTCSheet+", defaultDatasheetPath: "+defaultDatasheetPath+",defaultDataSheet: "+defaultDataSheet+",defaultDataID: "+defaultDataID
				
		//Read the service file data and service sheets
		def WorkFlow = context.GenericLibraries.importDataSheet('WorkFlow', workflowFilePath);
		 List<String> WorkFlowSheetData = WorkFlow.get("excelData")
		 int cCount = WorkFlow.get("ColumnCount")
		
		def int cOrchestratedTCName = 0;		
		//get TestCaseColumn Number
		for (int i=0; i < cCount;i++) {
			if  ( OrchestratedTCName==WorkFlowSheetData[0].get(i).toString()) {
			//set the test case column number
			cOrchestratedTCName = i ;
			break;
			}
		}
		def Reportpath = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Resultpath"); 
		def rtodayStr = new java.text.SimpleDateFormat("MM/dd/yyyy hh:mm:ss").format(new Date())
		def orchDataID ="";
		def RequestXMLPath = "";
		def ResponseXMLPath = "";
		def orchRequest = "";
		def orchResponse = "";
		def orchStartTime = "";
		def orchEndTime = "";
		def orchResponseTime = "";
		//loop through the test case column f0r service orchestrated execution
		for (int j=1; j<WorkFlowSheetData.size(); j++)	{
			if (WorkFlowSheetData[j].get(cOrchestratedTCName)=="null") {
			 return
			}
			else {
				//split the cell value to get the Service name,TestCaseame and Data Sheet ID
				String[] str_array = WorkFlowSheetData[j].get(cOrchestratedTCName).toString().split(";\\n");
				int arraysize = str_array.size()
				def String[] Details
				def Map<String, String> TestCaseDetails = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
				for (int i=0; i< arraysize ; i++) {
					Details = str_array[i].toString().split("=");
					TestCaseDetails.put(Details[0], Details[1])
				}
				if (TestCaseDetails.containsKey("InConfigfile")){
						if (TestCaseDetails.containsKey("TCName")) {TCName = TestCaseDetails.get("TCName"); } else{TCName=defaultTCName}
						TCPath = FrameworkProperties.get(TestCaseDetails.get("InConfigfile")+"_TCPath" )
						TCSheet = FrameworkProperties.get(TestCaseDetails.get("InConfigfile")+"_TCSheet" )
						DatasheetPath = FrameworkProperties.get(TestCaseDetails.get("InConfigfile")+"_DatasheetPath" )
						DataSheet=FrameworkProperties.get(TestCaseDetails.get("InConfigfile")+"_DataSheet" )
						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "ServiceInfoFolder",FrameworkProperties.get( TestCaseDetails.get("InConfigfile")+"_ServiceInfoFolder" ))
						if (TestCaseDetails.containsKey("DataID")) {	DataID = TestCaseDetails.get("DataID"); } else {DataID=defaultDataID}
					}
				else {
				if (TestCaseDetails.containsKey("TCName")) {TCName = TestCaseDetails.get("TCName"); } else{TCName=defaultTCName}
				if (TestCaseDetails.containsKey("TCPath")) {sTCPath = TestCaseDetails.get("TCPath");TCPath = FrameworkProperties.get(sTCPath); } else {sTCPath=defaultTCPath}
				if (TestCaseDetails.containsKey("TCSheet")) {TCSheet = TestCaseDetails.get("TCSheet"); } else {TCSheet=defaultTCSheet}
				if (TestCaseDetails.containsKey("DatasheetPath")) {sDatasheetPath = TestCaseDetails.get("DatasheetPath"); DatasheetPath = FrameworkProperties.get(sDatasheetPath)} else {sDatasheetPath=defaultDatasheetPath}
				if (TestCaseDetails.containsKey("DataSheet")) {DataSheet = TestCaseDetails.get("DataSheet"); } else {DataSheet=defaultDataSheet}
				if (TestCaseDetails.containsKey("DataID")) {	DataID = TestCaseDetails.get("DataID"); } else {DataID=defaultDataID}
				TCInfo=""
				}
				//Call ExecuteTestCasTCPathriver
			          def TestCaseDriver = testRunner.testCase.testSuite.project.testSuites["Driver"];
					TestCaseDriver.testCases["Driver"].testSteps["TestCaseDriver"].run(testRunner, context);
					orchDataID = orchDataID + TCName + ":" + DataID + ",";
					context.TestCaseDriver.ExecuteTestCaseDriver(TCName,TCPath, TCSheet, DatasheetPath,DataSheet,DataID,TCInfo="");
					// create the concatenated request for all the Workflow test case
					orchRequest = orchRequest + 
					'*******************************************************************************************************************************************' + "\r\n" + 
					TCName+"_"+DataID+' Timestamp : ' + rtodayStr +  "\r\n" + 
					'*******************************************************************************************************************************************' + "\r\n" + 
					com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Request")  + "\r\n";
					// create the concatenated response for all the Workflow test case
					orchResponse = orchResponse + 
					'*******************************************************************************************************************************************' + "\r\n" + 
					TCName+"_"+DataID+' Timestamp : ' +  rtodayStr +  "\r\n" + 
					'*******************************************************************************************************************************************' + "\r\n" + 
					com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Response")  + "\r\n";
					// capture first test case Start Time  and Last test case end time
					if (j == 1){
						orchStartTime = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "starttime");
					}
					if (j == WorkFlowSheetData.size()-1){
						orchEndTime = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "endtime");	
					}
					
					
			}
			if (com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("TestCaseResult").equalsIgnoreCase("fail")){
				j = WorkFlowSheetData.size()
				orchEndTime = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "endtime");
			}
		}
		// calculate ResponseTime in ms
		def Enterprisefunction = testRunner.testCase.testSuite.project.testSuites["Library"];
		Enterprisefunction.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);
		long starttime = context.GenericLibraries.converttimetoMs(orchStartTime)
		long  endtime = context.GenericLibraries.converttimetoMs(orchEndTime)
		orchResponseTime = (endtime - starttime).toString();
		log.info " starttime   and   endtime and ResponseTime  for WorkFlow is  " +  starttime +"--" + endtime + "---" + orchResponseTime;
		
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "ResponseTime", orchResponseTime)	
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "DataID", orchDataID );
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Request", orchRequest )
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Response", orchResponse )
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "starttime", orchStartTime )
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "endtime", orchEndTime )

		//com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "ResponseTime", orchResponseTime)	
	}
	catch(Exception e) { log.error(' Exception occurred in ExecuteWorkflowDriver. Exception Details: ' +e.getMessage());}
	}
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="TestCaseDriver" id="711169dd-700c-4b85-9bb7-33215dd9f63b">
        <con:settings/>
        <con:config>
          <script><![CDATA[//Import packages
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import java.io.*;
import com.eviware.soapui.*;
import groovy.util.logging.*;
import groovy.io.FileType

//initialize log, testrunner and context for access inside GenericLibraries class
TestCaseDriver.log = log;
TestCaseDriver.testRunner = testRunner;
TestCaseDriver.context = context;

context.setProperty("TestCaseDriver", new TestCaseDriver());

public  class TestCaseDriver {

	//define  log, testrunner and context inside class
	def static log;
	def static testRunner;
  	def static context;

	// considering TCName,DataId,serviceName is passed from Suite driver
	public static ExecuteTestCaseDriver(String TCName, String TCPath="", String TCSheet="", String DatasheetPath="" , String DataSheet="",String DataID="", String TCInfo = "") {
		try {
			
		log.info " ExecuteTestCaseDriver called for TestCase " +  TCName

		def String globalTCPath; def String globalDatasheetPath;def String globalTCSheet;def String globalDataSheet;def String globalDataID;
		def String sTCPath; def String sDatasheetPath;def keywordResult
		
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;

		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);

		//Read Services File path location properties
		String sConfig = projectPath + "/Config/FrameworkProperties.properties"
		def FrameworkProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		
		globalTCPath = FrameworkProperties.get( "global_TCPath" )
		globalTCSheet = FrameworkProperties.get( "global_TCSheet" )
		globalDatasheetPath = FrameworkProperties.get( "global_DatasheetPath" )
		globalDataSheet=FrameworkProperties.get( "global_DataSheet" )
		globalDataID=FrameworkProperties.get( "global_DataID" )
	
		log.info " Printing Global Variables: global_TCPath: "+globalTCPath+", global_TCSheet: "+globalTCSheet+", global_DatasheetPath: "+globalDatasheetPath+",global_DataSheet: "+globalDataSheet+",global_DataID: "+globalDataID
		
		if (TCInfo!="") {	
			//split the cell value to get the Service name,TestCaseName and Data Sheet ID
			String[] str_array = TCInfo.split(";\\n");
			int arraysize = str_array.size()
			def String[] Details
			def Map<String, String> TestCaseDetails = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
			for (int i=0; i< arraysize ; i++) {
				Details = str_array[i].toString().split("=");
				TestCaseDetails.put(Details[0], Details[1])
			}
				if (TestCaseDetails.containsKey("InConfigfile")){
					TCPath = FrameworkProperties.get(TestCaseDetails.get("InConfigfile")+"_TCPath" )
					TCSheet = FrameworkProperties.get(TestCaseDetails.get("InConfigfile")+"_TCSheet" )
					DatasheetPath = FrameworkProperties.get(TestCaseDetails.get("InConfigfile")+"_DatasheetPath" )
					DataSheet=FrameworkProperties.get(TestCaseDetails.get("InConfigfile")+"_DataSheet" )
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "ServiceInfoFolder",FrameworkProperties.get( TestCaseDetails.get("InConfigfile")+"_ServiceInfoFolder" ))
					if (TestCaseDetails.containsKey("DataID")) {	DataID = TestCaseDetails.get("DataID");} else {DataID=globalDataID}
				}
				else {
					if (TestCaseDetails.containsKey("TCPath")) {sTCPath = TestCaseDetails.get("TCPath"); TCPath = FrameworkProperties.get(sTCPath)} else {TCPath=globalTCPath}
					if (TestCaseDetails.containsKey("TCSheet")) {TCSheet = TestCaseDetails.get("TCSheet"); } else {TCSheet=globalTCSheet}
					if (TestCaseDetails.containsKey("DatasheetPath")) {sDatasheetPath = TestCaseDetails.get("DatasheetPath");  DatasheetPath = FrameworkProperties.get(sDatasheetPath)} else {DatasheetPath=globalDatasheetPath}
					if (TestCaseDetails.containsKey("DataSheet")) {DataSheet = TestCaseDetails.get("DataSheet"); } else {DataSheet=globalDataSheet}
					if (TestCaseDetails.containsKey("DataID")) {	DataID = TestCaseDetails.get("DataID"); } else {DataID=globalDataID}
				}
		}
		else {
			if (TCPath!="") {sTCPath = TCPath } else {TCPath=globalTCPath}
			if (TCSheet!="") {TCSheet = TCSheet } else {TCSheet=globalTCSheet}
			if (DatasheetPath!="") {DatasheetPath = DatasheetPath} else {DatasheetPath=globalDatasheetPath}
			if (DataSheet!="") {DataSheet = DataSheet } else {DataSheet=globalDataSheet}
			if (DataID!="") {	DataID = DataID } else {DataID=globalDataID}
		}

		log.info " Printing TestCase Variables: TCName: "+TCName+",TCPath: "+TCPath+", TCSheet: "+TCSheet+", DatasheetPath: "+DatasheetPath+",DataSheet: "+DataSheet+",DataID: "+DataID
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "DataID", DataID )
		//Read  service file data and service sheets
		def Service = context.GenericLibraries.importDataSheet(TCSheet, TCPath);
		def Data = context.GenericLibraries.importDataSheet(DataSheet, DatasheetPath);
		List<String> ServiceSheetData = Service.get("excelData")
		List<String> DataSheetData = Data.get("excelData")
		int ServiceRowCount = ServiceSheetData.size()

		//get the ServiceSheet row count
		int sCount = Service.get("ColumnCount")
		int ServiceSheetDatacount = ServiceSheetData.size()
		def int sTestCaseColumn = 0;
		def int sActionColumn=0;
		def int sOnPass=0;
		def int sOnFail=0;
		 
		//get TestCaseColumn Number
		for (int m=0; m < sCount; m++) {
			if  ( TCName.toLowerCase()==ServiceSheetData[0].get(m).toString().toLowerCase()) {
			//set the test case column number
			sTestCaseColumn = m;
			break;
			}
			else if(m >= sCount) {
				def TCResult = com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TestCaseResult","No Run");
		          def FailureReason = com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason"," TestCase " +TCName+" not found in "+ TCPath+" Please check the column names to see if test case is present");
		          break;
			}
		}

		for (int j=0; j < sCount; j++) {
			if  ( "Action".toLowerCase()==ServiceSheetData[0].get(j).toString().toLowerCase()) {
			//set the tsActionColumn number
			sActionColumn = j;
			break;
			}
		}

		for (int k=0; k < sCount; k++) {
			if  ( "OnPass".toLowerCase()==ServiceSheetData[0].get(k).toString().toLowerCase()) {
			//set the Onpass column number
			sOnPass = k;
			break;
			}
		}

		for (int l=0; l < sCount; l++) {
			if  ( "OnFail".toLowerCase()==ServiceSheetData[0].get(l).toString().toLowerCase()) {
			//set the test case column number
			sOnFail = l;
			break;
			}
		}
	
	    scripts.testCases["ScriptLibrary"].testSteps["KeyWordFunctions"].run(testRunner, context);
		 // for each row in service file
		 
	    for (int i=1; i < ServiceRowCount; i++) {
			HashMap DataMap = new HashMap();
			def dataTestCase =ServiceSheetData[i].get(sTestCaseColumn).toString() //Get Data from excel
		   	def Action =ServiceSheetData[i].get(sActionColumn).toString() //Get Action from excel
		   	def OnPass =ServiceSheetData[i].get(sOnPass).toString() //Get Data from excel
		   	def OnFail =ServiceSheetData[i].get(sOnFail).toString() //Get Action from excel
			if (dataTestCase!="") {
				def DataSet = dataTestCase.split(';') //Splilt to get input parameters
				for (int s=0; s < DataSet.size(); s++) {
					def Input = DataSet[s].split("=") //Split to get key value pair
					if (Input.size()==2) {
						def switchresult
						 if(Input[1].toLowerCase().contains(",")) {switchresult = true} else{ switchresult = false}
						switch (switchresult) {
						case true:					
							def multiparams = Input[1].split(",")
							def InputString=""
							def sval=""
							for (int m=0;m<multiparams.size();m++)
							{
								if (multiparams[m].toLowerCase().contains("ds(")) {
									String sInput =multiparams[m].substring(multiparams[m].lastIndexOf("(") + 1, multiparams[m].indexOf(")")); 
									sval = context.GenericLibraries.readDS(DataSheetData, DataID, sInput, Data.get("ColumnCount"))
									if (sval.toLowerCase().contains("prop(")) {
										String trueInput =sval.substring(sval.lastIndexOf("(") + 1, sval.indexOf(")")); 
										sval =FrameworkProperties.get(trueInput)
									}
									else if  (sval.toLowerCase().contains("dict(")) {
										String trueInput =sval.substring(sval.lastIndexOf("(") + 1, sval.indexOf(")")); 
										sval =context.GenericLibraries.fetchfromDictionary(trueInput)
									}
								}
								else if (multiparams[m].toLowerCase().contains("prop(")) {
									String sInput =multiparams[m].substring(multiparams[m].lastIndexOf("(") + 1, multiparams[m].indexOf(")")); 
									sval =FrameworkProperties.get(sInput)
								}
								else if (multiparams[m].toLowerCase().contains("dict(")) {
									String sInput =multiparams[m].substring(multiparams[m].lastIndexOf("(") + 1, multiparams[m].indexOf(")"));
									sval = context.GenericLibraries.fetchfromDictionary(sInput)
								}
								else {
										sval=multiparams[m]
								}
							if (InputString==""){InputString=sval} else {InputString=InputString+","+sval}
							}
							DataMap.put("Action",Action); DataMap.put(Input[0] ,InputString)
							break;
							
						case false:
							def sval=""
							if (Input[1].toLowerCase().contains("ds(")) 
							{
								String sInput = Input[1].substring(Input[1].lastIndexOf("(") + 1, Input[1].indexOf(")")); 
								sval = context.GenericLibraries.readDS(DataSheetData, DataID, sInput, Data.get("ColumnCount"))
								if (sval.toLowerCase().contains("prop(")) {
										String falseInput =sval.substring(sval.lastIndexOf("(") + 1, sval.indexOf(")")); 
										sval =FrameworkProperties.get(falseInput)
									}
									else if  (sval.toLowerCase().contains("dict(")) {
										String falseInput =sval.substring(sval.lastIndexOf("(") + 1, sval.indexOf(")")); 
										sval =context.GenericLibraries.fetchfromDictionary(falseInput)
									}
								DataMap.put("Action",Action); DataMap.put(Input[0] ,sval)
							}				
							else if (Input[1].toLowerCase().contains("prop(")) 
							{
								String sInput = Input[1].substring(Input[1].lastIndexOf("(") + 1, Input[1].indexOf(")")); 
								DataMap.put("Action",Action); DataMap.put(Input[0] ,FrameworkProperties.get(sInput))
							}
							else if (Input[1].toLowerCase().contains("dict(")) 
							{
								String sInput = Input[1].substring(Input[1].lastIndexOf("(") + 1, Input[1].indexOf(")")); 
								DataMap.put("Action",Action); DataMap.put(Input[0] ,context.GenericLibraries.fetchfromDictionary(sInput))
							}
							else 
							{	
								DataMap.put("Action",Action); DataMap.put(Input[0] ,Input[1])	
							}							
							break;
						
					}
					}
					else 
					{
						log.info " Input data in row# " +(i+1)+" is incorrect for TestCase "+TCName+" at the location "+TCPath
					}
				}
				
				if (DataMap.get("Action")!=null) {
					context.KeywordLibraries.InvokeActions(DataMap);
					//update this keywordresult with actual return from keyword
					keywordResult=com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("TestCaseResult");
					//-----------------------------------------------
					def switchforward
					switch (keywordResult.toLowerCase()) {
					case "pass"://onpass
						if (OnPass.toLowerCase().equals("")){
							continue;
						}
						else {
						 if(OnPass.toLowerCase().contains("goto_")) {switchforward = true} else{ switchforward = false}
							switch (switchforward) {
								case true:
									def passKey = OnPass.split("_")
									i++
									while ((ServiceSheetData[i].get(sOnPass).toString() =="") || !(ServiceSheetData[i].get(sOnPass).toString().contains(passKey[1])) ){ i++;}
									continue;
									
								case false:
									def passKey = OnPass.split("_")
									i=0;
									while ((ServiceSheetData[i].get(sOnPass).toString() =="") || !(ServiceSheetData[i].get(sOnPass).toString().contains(passKey[1])) ){ i++;}
									continue;
							}
						}
					break;
						
					case "fail"://onFail
						if (OnFail.toLowerCase().equals("")){
							i = ServiceRowCount
						}
						else {
						if(OnFail.toLowerCase().contains("goto_")) {switchforward = true} else{ switchforward = false}
							switch (switchforward) {
								case true:
									def failKey = OnFail.split("_")
									i++
									while ((ServiceSheetData[i].get(sOnFail).toString() =="") || !(ServiceSheetData[i].get(sOnFail).toString().contains(failKey[1])) ){ i++;}
									continue;
									
								case false:
									def failKey = OnFail.split("_")
									i=0;
									while ((ServiceSheetData[i].get(sOnFail).toString() =="") || !(ServiceSheetData[i].get(sOnFail).toString().contains(failKey[1])) ){ i++;}
									continue;
							}
						}
					 break;

					default:
						log.info "Keyword did not return Pass or Fail. Continuing execution"
					break;
					
					}
				}
			}

		}
	}
	catch(Exception e) { log.error(' Exception occured in ExecuteTestCaseDriver. Exception Details: ' +e.getMessage());}
	}
}]]></script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite name="Library" id="5e827a42-f9b8-4098-9ce7-712f1f589131">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ScriptLibrary" searchProperties="true" id="45d3e0d4-e12e-4ab7-8fae-e22839f8b4ad">
      <con:settings/>
      <con:testStep type="groovy" name="EnterpriseFunctions" id="d9ba8da3-0655-40a0-9ba5-9b58eafdee1f">
        <con:settings/>
        <con:config><script><![CDATA[//Import packages
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import java.io.*;
import com.eviware.soapui.*
import groovy.util.logging.*;
import groovy.io.FileType;
import java.util.Date;
import java.text.*;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.hssf.util.HSSFColor.BLUE;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFHyperlink;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

//initialize log, testrunner and context for access inside GenericLibraries class
GenericLibraries.log = log;
GenericLibraries.testRunner = testRunner;
GenericLibraries.context = context;

context.setProperty("GenericLibraries", new GenericLibraries());

public  class GenericLibraries {
	//define  log, testrunner and context inside class
	def static log;
	def static testRunner;
  	def static context;

//************************************************************************************************************************************************************
//Function Name 			: 	importDataSheet
//Functionality to Achieve	: 	To refer the input data sheet and create worksheet object with reference to that input sheet. Also fetch the active row count and active column count.
//Inputs 					:	(Sheet Name to be Referred,Excel file Path(Optional)). If path not available will refer global property "globalinputworkbookPath"
//Outputs 				:	Returned as a Map (Object worksheet:<<worksheet Object>>, int RowCount:<<# of active rows>>, int ColumnCount:<<# of active Columns>>)
//************************************************************************************************************************************************************
	public static  importDataSheet (String worksheetName,String workbookPath = "") {	
		try {
		//Initiating for UI alerts, Global Property, DataSheet Name, Workbook path
		def globalworkbookPath = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "globalworkbookPath" )
		def datasheetName = worksheetName;


		//if workbookPath is null, initialize globalinputworkbookPath. If globalinputworkbookPath is null then throw alert and abort script with error
		def iworkbookPath = workbookPath;
			if (iworkbookPath == "" ) { 
				iworkbookPath = globalworkbookPath;
				if(iworkbookPath == "") { 
				log.info "Data worksheet is not defined in function call or as a Global Variable. Please check the Global Properties. Test is aborted!!"
				return
				}
			}

		//Verify workbook path exists and is correct directory
		File f = new File(iworkbookPath);
		if(f.exists() && !f.isDirectory()) {
			//Intialize workbook and worksheet
		    	Workbook workbook =  WorkbookFactory.create(new FileInputStream(iworkbookPath));
		    	Sheet sheet = workbook.getSheet(datasheetName);

		    	//Count includes header row	
		    	def int rCount = sheet.getPhysicalNumberOfRows();
		      	
		    	//Count includes first column
			def int cCount = sheet.getRow(0).getLastCellNum(); 

			//intialize call to read data from the sheet to a array
			Iterator rowIterator = sheet.rowIterator();          
        			def sheetData = []
                 	while(rowIterator.hasNext()) {       			
            		def row = rowIterator.next()
				def rowData = []
				for (int i=0; i<cCount; i++) {
				    	Cell cell
                 		rowData[i] = row.getCell(i).toString();	           				
                 	}
                 	sheetData << rowData
        		}

			//add values to a Map
			Map Result = [excelData: sheetData, RowCount: rCount, ColumnCount: cCount];
					    		}			
		else {			
			//if path is incorrect, abort test
			log.info "Data worksheet path is incorrect. Test is aborted!!";
			}
		}
	catch(Exception e) { log.error(' Exception occurred in importDataSheet. Exception Details: ' +e.getMessage());}
	}


//************************************************************************************************************************************************************
//Function Name 				:	createProperties
//Functionality to Achieve		:	Create Property and assign value to created property
//Inputs						: 	(PropertyName,Value,PropertyLevel(Global, Project, TestCase,TestSuite) -- Optional)) /*PropertyLevel will be defaulted to Project level*/
//Outputs						:    Propertyname with value assigned at indicated level
//************************************************************************************************************************************************************
	public  createProperties (String PropertyName, String Value, String PropertyLevel="project") {	
		try {
		switch (PropertyLevel.toLowerCase()) {
			//add global value
			case "global":  com.eviware.soapui.SoapUI.globalProperties.setPropertyValue(PropertyName, Value); break;
			//add project value
			case " project": testRunner.testCase.testSuite.project.setPropertyValue(PropertyName, Value) ; break;
			//add testsuite value
			case "testsuite": testRunner.testCase.testSuite.setPropertyValue(PropertyName, Value); break;
			//add testcase value
			case "testcase": testRunner.testCase.setPropertyValue(PropertyName, Value); break;
			}
		}
			catch(Exception e) { log.error(' Exception occurred in createProperties. Exception Details: ' +e.getMessage());}
	}


//************************************************************************************************************************************************************
//Function Name 					:	readDS
//Functionality to Achieve			:	Read DS value based on row ID and column Name
//Inputs							: 	(DataList, DSID, Col header, colCount) -- Optional)) /*PropertyLevel will be defaulted to Project level*/
//Outputs							:    Parameter Value for the give DSID and column Name
//************************************************************************************************************************************************************

	public static readDS(List dataList , String DSID , String colHeader , int colCount ){
		try {
		int DSCount = dataList.size();
		//int DataSheetcolcount = list.??; we cannot fetch this value from list as each row can vary in column length, hence adding the Colcount in the input parameters of method
		def int colHeaderindex = 0;
		def int DSIDindex = 0;
		
		// find column header index
		for (int j=0; j<colCount; j++) {
			if  ( colHeader == dataList[0].get(j).toString()) {
				colHeaderindex = j;
			break;
			}
		}
		// find DSID index
		for (int i=0; i<DSCount;i++) {
			if  ( DSID == dataList[i].get(0).toString()) {
			DSIDindex = i;
			break;
			}
		}
		String Value= dataList[DSIDindex].get(colHeaderindex).toString()
		return Value;
		}
		catch(Exception e) { log.error(' Exception occurred in readDS. Exception Details: ' +e.getMessage());}
	}

//************************************************************************************************************************************************************
//Function Name 					:	readDatafromConfig
//Functionality to Achieve			:	Read Data from Config file and create properties
//Inputs							: 	Config File Path
//Outputs							:    Properties
//************************************************************************************************************************************************************

public static readDatafromConfig(String filepath) {

	try {
		
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def ConfigFilePath = filepath
		
		//Load properties form propertiesfile
		Properties properties = new Properties()

		File propertiesFile = new File(ConfigFilePath)
		propertiesFile.withInputStream 
		{
    			properties.load(it)
		}
 
		//Populate property key and values to map
		def ConfigMap = [:]
		
		//iterate through File properties
		for (String key : properties.stringPropertyNames()) 
		{
    			String value = properties.getProperty(key);
    			ConfigMap.put(key, value);
		}
		return ConfigMap;
		}	
	catch(FileNotFoundException e)  { log.error(' File Not Found in readDatafromConfig method. Exception Details : '+e.getMessage);}	
	catch(Exception e) { log.error(' Exception occurred in readDatafromConfig. Exception Details: ' +e.getMessage());}
	}

//************************************************************************************************************************************************************
//Function Name 			     : 	fetchfromDictionary
//Functionality to Achieve		: 	To fetch a particular node value and store it in a variable of hashmap
//Inputs 						:	variable
//Outputs 					:	hashMap variable with node and and value 
//************************************************************************************************************************************************************    
	public static fetchfromDictionary(String variable){
		try{
			def currDict=com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Dictionary")
			def content = currDict.split(";")
			for (int i; i<content.size();i++){
				def variables = content[i].split("=")
				if (variables[0].equalsIgnoreCase(variable)) {
					log.info " Value for "+variable+" found in Dictornary." 
					return variables[1].toString()		 
					break;
				}
				if (i==content.size()){
					log.info " Value for "+variable+" not in Dictornary. Please check the variable passed in InputSheet"		
				}
			} 
			}
		catch(Exception e){
			log.error(' Exception occurred in fetchfromDictionary. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "fetchfromDictionary failed. Exception: " +e.getMessage())
			}
		}

//************************************************************************************************************************************************************
//Function Name 			     : 	converttimetoMs
//Functionality to Achieve		: 	To Convert Time in string format to miliseconds
//Inputs 						:	Time in yyyy-MM-dd HH:mm:ss.SSS as a string 
//Outputs 					:	converted Date in mlliseconds
//************************************************************************************************************************************************************    
	public static converttimetoMs(String rtimeStamp){
		    DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS"); 
		    Date ctimeStamp;
		try {
			   ctimeStamp = df.parse(rtimeStamp);
		        //String newDateString = df.format(startDate);
		        //System.out.println("newDateString is  " + newDateString);
		       // log.info ("converted timeStamp is  " + ctimeStamp);
		       // log.info ("in milliseconds: " + ctimeStamp.getTime());
		        def mstime =  ctimeStamp.getTime();
		        return  mstime;
			
		} catch(Exception e){
			log.error(' Exception occurred in converttimetoMs. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "converttimetoMs failed. Exception: " +e.getMessage())
			}
		
	}


//************************************************************************************************************************************************************
//Function Name 				: 	GetReportHeaders
//Functionality to Achieve		: 	GetReportHeaders to Create the XLSX report file , from Arraylist Data
//Inputs 						:	NA
//Outputs 					:	Output Headerlist Array
//************************************************************************************************************************************************************
public static GetReportHeaders(returntype) {
	try{
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
		def projectPath = groovyUtils.projectPath
		String sConfig = projectPath + "/Config/FrameworkProperties.properties"
		def FrameworkProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		String ReportHeaders = FrameworkProperties.get("ReportHeaders");
		StringTokenizer st = new StringTokenizer(ReportHeaders, ",");
		ArrayList<HashMap<String, String>> headerlistArray = new ArrayList<HashMap<String, String>>();  
		HashMap headerlistMap = new HashMap();
		switch (returntype) {
			case "Arraylist":// Return Headers as ArrayList Data
				while(st.hasMoreTokens()) {
		    		String data = st.nextToken();
		   		headerlistArray.add(data);
		  		} 
		  		//log.info "headerlistArray value is ------" + headerlistArray;
				return headerlistArray ;
				break;
			
			case "Hashmap":// Return Headers as HashMap Data	
				while(st.hasMoreTokens()) {
		    		String data = st.nextToken();
		   		headerlistMap.put(data, data);
		  		} 
		  		//log.info "headerlistMap value is ------" + headerlistMap;
				return headerlistMap ;
				break;
			
			default:
				log.info "GetReportHeaders did not receive a recognized datastructure format. Continuing execution"
				break;
		}
		
	}
	catch(FileNotFoundException e)  { log.error(' File Not Found in GetReportHeaders method. Exception Details : '+e.getMessage);}	
	catch(Exception e) { log.error(' Exception occurred in GetReportHeaders. Exception Details: ' +e.getMessage());}
	}

//************************************************************************************************************************************************************
//Function Name 				: 	GenerateXlReport
//Functionality to Achieve		: 	To Create the XLSX report file , from Arraylist Data
//Inputs 						:	ArrayList containing the elements to write in the Report file
//Outputs 					:	OutputXLSX file with timestamp  in the directory provided in Config.XLS file
//************************************************************************************************************************************************************
public static void GenerateXlReport (String dReportinFolder,ArrayList Executionreportheader,Map<String,String> Executionreport) {

	try {
		// Inside my Generate XL Report method
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet SummarySheet = wb.createSheet("Test_Execution_Summary");
		HSSFSheet sheet = wb.createSheet("Test_Execution_Report");
		
		// Header Font changes
		HSSFFont headerfont = wb.createFont();
	     headerfont.setFontHeightInPoints((short) 11);
	     headerfont.setFontName("CALIBRI");
	     headerfont.setColor(HSSFColor.WHITE.index);
	     // End of font changes

		// Headercellstyle changes
	     HSSFCellStyle headerStyle = wb.createCellStyle();
		headerStyle.setFillForegroundColor(HSSFColor.DARK_BLUE.index);
		headerStyle.setFillPattern(headerStyle.SOLID_FOREGROUND);
		headerStyle.setAlignment(headerStyle.ALIGN_CENTER);
		headerStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
	     headerStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
	     headerStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
	     headerStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
	     headerStyle.setFont(headerfont);
		// End of Headercellstyle changes
	      
		// Fill in Header text in report
		HSSFRow hrow = sheet.createRow(0);
		for (int a = 0; a < Executionreportheader.size(); a++) {
			String headervalue = (String)Executionreportheader.get(a);
			sheet.autoSizeColumn(a);
		    	HSSFCell cell = hrow.createCell(a);
		    	cell.setCellValue(headervalue);
			cell.setCellStyle(headerStyle);
		} 

		// Font changes
		HSSFFont font = wb.createFont();
	     font.setFontHeightInPoints((short) 10);
	     font.setFontName("CALIBRI");
	     font.setColor(HSSFColor.BLACK.index);
	     // End of font changes

		// cellstyle changes
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(headerStyle.ALIGN_LEFT);
		style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
	     style.setBorderTop(HSSFCellStyle.BORDER_THIN);
	     style.setBorderRight(HSSFCellStyle.BORDER_THIN);
	     style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
	     style.setFont(font);
		// End of style changes

		// Result Font changes
		HSSFFont rfont = wb.createFont();
	     rfont.setFontHeightInPoints((short) 10);
	     rfont.setFontName("CALIBRI");
	     rfont.setColor(HSSFColor.WHITE.index);
	     // End of font changes

		// Fill in text for results in report 
		for (int a = 0; a < Executionreport.size(); a++) {
			HashMap ExecutionreportrowData = Executionreport.get(a+1)
			HSSFRow row = sheet.createRow(a+1);
			for (int b = 0; b < Executionreportheader.size(); b++) {
				 String headername = (String)Executionreportheader.get(b);
				 if (ExecutionreportrowData.containsKey(headername+(a+1))) {
	            	 String  reportrowData = (String) ExecutionreportrowData.get(headername+(a+1)); 
	         		 HSSFCell cell = row.createCell(b);
				
				if (headername.contains("XMLPath")) {
	    				sheet.setColumnWidth(b,9500);
			          HSSFFont hlink_font = wb.createFont();
	            		hlink_font.setUnderline(HSSFFont.U_SINGLE);
	            		hlink_font.setColor(BLUE.index);
	            		hlink_font.setFontName("CALIBRI");
	            		hlink_font.setFontHeightInPoints((short) 10);
	            		HSSFCellStyle linkstyle = wb.createCellStyle();
	            		linkstyle.setFont(hlink_font);
	            		linkstyle.setWrapText(false);
	            		linkstyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
	            		linkstyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
	            		linkstyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
	            		linkstyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
	            		// set hyper links
	            		HSSFHyperlink hlink = new HSSFHyperlink(HSSFHyperlink.LINK_FILE);
	            		String filenamelink = reportrowData;
	            		filenamelink = filenamelink.replace('\\', '/');
	            		hlink.setAddress(filenamelink);
	    				cell.setCellValue(reportrowData);
		    			cell.setCellStyle(linkstyle);
		    			cell.setHyperlink(hlink);
		    			continue;
	    			}

	         		if (headername.contains("ExecutionResult")) {
	         			HSSFCellStyle resultstyle = wb.createCellStyle();
	         			resultstyle.setFillPattern(resultstyle.SOLID_FOREGROUND);
	         			resultstyle.setAlignment(resultstyle.ALIGN_CENTER);
	     
	         			if (reportrowData.equalsIgnoreCase("fail")) {
	         				resultstyle.setFillForegroundColor(HSSFColor.RED.index);
	         				resultstyle.setAlignment(style.ALIGN_CENTER);
	         				resultstyle.setFont(rfont)
	         				cell.setCellStyle(resultstyle);
	         				cell.setCellValue(reportrowData);
	         				continue;
	         			} 
	         			if (reportrowData.equalsIgnoreCase("pass")) {
	         				resultstyle.setFillForegroundColor(HSSFColor.GREEN.index);
	         				resultstyle.setAlignment(style.ALIGN_CENTER);
	         				resultstyle.setFont(rfont)
	         				cell.setCellStyle(resultstyle);
	         				cell.setCellValue(reportrowData);
	         				continue;
	         			}
	         			if (reportrowData.equalsIgnoreCase("no run")) {
	         				resultstyle.setFillForegroundColor(HSSFColor.YELLOW.index);
	         				resultstyle.setAlignment(style.ALIGN_CENTER);
	         				cell.setCellStyle(resultstyle);
	         				cell.setCellValue(reportrowData);
	         				continue;
	         			}
	         		}
	         		cell.setCellValue(reportrowData);
	    			cell.setCellStyle(style);
	    			sheet.autoSizeColumn(b);
	    			if (headername.contains("DataID")) {
					sheet.setColumnWidth(b,9500);
				}
	            	 
	             } 
	             else  {
	            	 HSSFCell cell = row.createCell(b);
		         	 cell.setCellValue("");
		    		 cell.setCellStyle(style);
		    		 sheet.autoSizeColumn(b);
	             }
			 }
		}
		
				//Create Summary Sheet
				// General Font
				SummarySheet.setDisplayGridlines(false);
				HSSFFont sfont = wb.createFont();
			     sfont.setFontHeightInPoints((short) 10);
			     sfont.setFontName("CALIBRI");
			     sfont.setColor(HSSFColor.BLACK.index);

				// Report Title Font
			     HSSFFont ssfont = wb.createFont();
	     		ssfont.setFontHeightInPoints((short) 20);
	    			ssfont.setFontName("CALIBRI");
	     		ssfont.setColor(HSSFColor.WHITE.index);

	     		// Header Font
	     		HSSFFont hfont = wb.createFont();
	     		hfont.setFontHeightInPoints((short) 10);
	    			hfont.setFontName("CALIBRI");
	     		hfont.setColor(HSSFColor.WHITE.index);

				// cellstyle for description
				HSSFCellStyle sstyle = wb.createCellStyle();
				sstyle.setAlignment(sstyle.ALIGN_LEFT);
				sstyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
			     sstyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
			     sstyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
			     sstyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
			     sstyle.setFont(sfont);

				// cellstyle for Values
			     HSSFCellStyle vstyle = wb.createCellStyle();
				vstyle.setAlignment(sstyle.ALIGN_RIGHT);
				vstyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
			     vstyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
			     vstyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
			     vstyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
			     vstyle.setFont(sfont);

				// cellstyle for Report Title
			     HSSFCellStyle ssstyle = wb.createCellStyle();
				ssstyle.setAlignment(ssstyle.ALIGN_CENTER);
				ssstyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
			     ssstyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
			     ssstyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
			     ssstyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
			     ssstyle.setFillForegroundColor(HSSFColor.DARK_BLUE.index);
				ssstyle.setFillPattern(headerStyle.SOLID_FOREGROUND)
	     		ssstyle.setAlignment(ssstyle.ALIGN_CENTER);
			     ssstyle.setFont(ssfont);

			     // cellstyle for Header
			     HSSFCellStyle hstyle = wb.createCellStyle();
				hstyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
			     hstyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
			     hstyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
			     hstyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
			     hstyle.setFillForegroundColor(HSSFColor.DARK_BLUE.index);
				hstyle.setFillPattern(hstyle.SOLID_FOREGROUND)
	     		hstyle.setAlignment(hstyle.ALIGN_CENTER);
			     hstyle.setFont(hfont);

				// End of style changes
				
				HSSFCell summarycell = SummarySheet.createRow(6).createCell(7); HSSFCell summary2cell = SummarySheet.createRow(6).createCell(8);
				HSSFCell hcell = SummarySheet.createRow(8).createCell(7); HSSFCell ecell = SummarySheet.createRow(9).createCell(7);
				HSSFCell pcell = SummarySheet.createRow(10).createCell(7); HSSFCell fcell = SummarySheet.createRow(11).createCell(7);
				HSSFCell ncell = SummarySheet.createRow(12).createCell(7); HSSFCell ppcell = SummarySheet.createRow(13).createCell(7);
				HSSFCell fpcell = SummarySheet.createRow(14).createCell(7);	HSSFCell npcell = SummarySheet.createRow(15).createCell(7);
				HSSFCell vhcell = SummarySheet.createRow(8).createCell(8); HSSFCell vecell = SummarySheet.createRow(9).createCell(8);
				HSSFCell vpcell = SummarySheet.createRow(10).createCell(8); HSSFCell vfcell = SummarySheet.createRow(11).createCell(8);
				HSSFCell vncell = SummarySheet.createRow(12).createCell(8);	HSSFCell vppcell = SummarySheet.createRow(13).createCell(8);
				HSSFCell vfpcell = SummarySheet.createRow(14).createCell(8);HSSFCell vnpcell = SummarySheet.createRow(15).createCell(8);

				hcell.setCellValue("Description"); vhcell.setCellValue("#"); 
				ecell.setCellValue("Total Number of Test Cases Executed");pcell.setCellValue("Total Number of Test Cases with status 'Passed'");
				fcell.setCellValue("Total Number of Test Cases with status 'Failed'");ncell.setCellValue("Total Number of Test Cases with status 'No Run'");
				ppcell.setCellValue("% of 'Passed' Test Cases (Passed/Executed)"); fpcell.setCellValue("% of 'Failed' Test Cases (Passed/Executed)");
				npcell.setCellValue("% of 'No Run' Test Cases (Passed/Executed)");vecell.setCellValue("Total Number of Test Cases Executed");
				
				//get Counts
				int TotalCount = Integer.parseInt(com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("TotalCount"))
				int PassCount = Integer.parseInt(com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("PassCount"))
				int FailCount = Integer.parseInt(com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("FailCount"))
				int NoRunCount = Integer.parseInt(com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("NoRunCount"))
				def PassPercent = (float)((PassCount*100)/TotalCount);	def FailPercent = (float)((FailCount*100)/TotalCount);	def NoRunPercent = (float)((NoRunCount*100)/TotalCount)
				vecell.setCellValue(TotalCount.toString());vpcell.setCellValue(PassCount.toString());
				vfcell.setCellValue(FailCount.toString());vncell.setCellValue(NoRunCount.toString());
				vppcell.setCellValue(PassPercent.toString()+"%");	vfpcell.setCellValue(FailPercent.toString()+"%");	
				vnpcell.setCellValue(NoRunPercent.toString()+"%");

				SummarySheet.addMergedRegion(new CellRangeAddress(6,6,7,8));
				summarycell.setCellValue("Test Execution Summary");
		    		
		    		ecell.setCellStyle(sstyle);pcell.setCellStyle(sstyle);
		    		fcell.setCellStyle(sstyle);ncell.setCellStyle(sstyle);
		    		ppcell.setCellStyle(sstyle);fpcell.setCellStyle(sstyle);npcell.setCellStyle(sstyle);
		    		
		    		vecell.setCellStyle(vstyle);vpcell.setCellStyle(vstyle);
		    		vfcell.setCellStyle(vstyle);vncell.setCellStyle(vstyle);
		    		vppcell.setCellStyle(vstyle);vfpcell.setCellStyle(vstyle);vnpcell.setCellStyle(vstyle);
		    		
	     		summarycell.setCellStyle(ssstyle);
	     		hcell.setCellStyle(hstyle);
	     		vhcell.setCellStyle(hstyle);
	     		SummarySheet.setColumnWidth(7,10500);
	     		SummarySheet.setColumnWidth(8,3000);

			def Resultdir = dReportinFolder
			File theDir = new File(Resultdir);
			if (!theDir.exists()) {
    		     	if(theDir.mkdirs()){
    		    		log.info "Result Directory successfully created!!  " + Resultdir;
    		    		}
    		    else {
    		    		log.info " Result Directory Creation Failed!!  " + Resultdir;
    		    		}
			}
			Date date = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("MMddyyyy hh_mm_ss");
			String formattedDate = sdf.format(date);
			def resultfilename = Resultdir+ "Execution_Report_" + formattedDate + ".xls"
			FileOutputStream out = new FileOutputStream(new File(resultfilename));
	     	wb.write(out);
	     	out.close();
	     	log.info " Test Suite Execution Completed for all Cases !!!"
			log.info " Execution Report generated for the current run. Path:' "+ resultfilename +"'"
		} catch (Exception e){
			log.error ' Exception occurred in GenerateXlReport. Exception Details: ' + e.getMessage() + e.printStackTrace();
		}
 }	
}]]></script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CustomFunctions" id="2fd44f90-636f-4799-8a4b-ae28976f8f88">
        <con:settings/>
        <con:config>
          <script>//Import packages
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import java.io.*;
import com.eviware.soapui.*
import groovy.util.logging.*;
import groovy.io.FileType;
import java.util.Date;
import java.text.SimpleDateFormat;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

//initialize log, testrunner and context for access inside GenericLibraries class
CustomLibraries.log = log;
CustomLibraries.testRunner = testRunner;
CustomLibraries.context = context;

context.setProperty("CustomLibraries", new CustomLibraries());

public  class CustomLibraries {
	//define  log, testrunner and context inside class
	def static log;
	def static testRunner;
  	def static context;

 //************************************************************************************************************************************************************
//Function Name 					: 	GenerateCardNumber
//Functionality to Achieve			: 	Generate CardNumber based on BIN Number Provided
//Inputs 							:	HashMap
//Outputs 						:	CardNumber
//************************************************************************************************************************************************************
  public static GenerateCardNumber(hashmapdata) {
	try { 
		String slength=hashmapdata.get("length");
 		int length=Integer.parseInt(slength)
 		String bin=hashmapdata.get("BIN");
		Random random = new Random(System.currentTimeMillis());
		int randomNumberLength = length - (bin.length() + 1);
		StringBuilder builder = new StringBuilder(bin);
		for (int i = 0; i &lt; randomNumberLength; i++) {
			int digit = random.nextInt(10);
			builder.append(digit);
		}
        // Do the Luhn algorithm to generate the check digit.
		int sum = 0;
       	for (int i = 0; i &lt; builder.toString().length(); i++) {
            	// Get the digit at the current position.
         		int digit = Integer.parseInt(builder.toString().substring(i, (i + 1)));
         		if ((i % 2) == 0) {
              		digit = digit * 2;
              		if (digit > 9) {
                   		digit = (digit / 10) + (digit % 10);
              		}
         		}
       	sum += digit;
       	}
        // The check digit is the number required to make the sum a multiple of 10.
        int mod = sum % 10;	
        builder.append(((mod == 0) ? 0 : 10 - mod));
        def cardnumber = builder.toString();
        def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
        scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);
        HashMap storeinDictDataMap = new HashMap();
        storeinDictDataMap.put("variable","cardnumber")
        storeinDictDataMap.put("value",cardnumber)
        context.KeywordLibraries.StoreInDictionary(storeinDictDataMap) 			
        log.info " CardNumber generated successfully. CardNumber :"+cardnumber
	}
catch(Exception e) { 
			log.error(' Exception occurred in GenerateCardNumber. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "GenerateCardNumber failed. Exception: " +e.getMessage())
		}	

    }
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="KeyWordFunctions" id="bb86fb60-d6d7-4900-8909-7a3d30fabbae">
        <con:settings/>
        <con:config><script>//Import packages

import wslite.soap.*
import wslite.http.auth.* 

import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;

import java.io.*;
import java.io.File;
import java.io.IOException;
import java.text.*;

import com.eviware.soapui.*
import com.eviware.soapui.model.iface.*
import com.eviware.soapui.impl.wsdl.teststeps.*;
import com.eviware.soapui.impl.wsdl.teststeps.registry.*;
import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.settings.ProxySettings
import com.eviware.soapui.support.XmlHolder;

import groovy.util.logging.*;
import groovy.io.FileType;

import javax.xml.xpath.*;
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.soap.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.StreamResult;
import javax.xml.XMLConstants;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator

import groovy.sql.Sql
import oracle.jdbc.driver.OracleTypes

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import com.gmongo.GMongoClient
import com.mongodb.*
// Impot only for Tibco JMS 
//import com.tibco.tibjms.TibjmsQueueConnectionFactory;
//import com.tibco.tibjms.*;

/*import com.ibm.mq.MQC;
import com.ibm.mq.MQEnvironment;
import com.ibm.mq.MQException;
import com.ibm.mq.MQGetMessageOptions;
import com.ibm.mq.MQMessage;
import com.ibm.mq.MQPutMessageOptions;
import com.ibm.mq.MQQueue;
import com.ibm.mq.MQQueueManager;
*/

//initialize log, testrunner and context for access inside GenericLibraries class
KeywordLibraries.log = log;
KeywordLibraries.testRunner = testRunner;
KeywordLibraries.context = context;

context.setProperty("KeywordLibraries", new KeywordLibraries());


public  class KeywordLibraries {
	//define  log, testrunner and context inside class
	def static log;
	def static testRunner;
  	def static context;
  	
	
//************************************************************************************************************************************************************
//Function Name 				: 	InvokeActions
//Functionality to Achieve		: 	To invoke respective keyword function
//Inputs 						:	HashMap
//Outputs 					:	Result
//************************************************************************************************************************************************************
 public static  InvokeActions(hashmapdata) {
 	try {
		def myFx=hashmapdata.get("Action"); 
		KeywordLibraries."$myFx"(hashmapdata);
	}
    	catch(Exception e) { 
			log.error(' Exception occurred in InvokeActions. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "InvokeActions failed. Exception: " +e.getMessage())
			}
	finally {
		// Do nothing
		}	

    }

//************************************************************************************************************************************************************
//Function Name 				: 	InvokeSOAPRequest
//Functionality to Achieve		: 	To invoke a SOAP service Request
//Inputs 						:	endpoint Url and soap request XML
//Outputs 					:	soap response xml
//************************************************************************************************************************************************************

	public static InvokeSOAPRequest(HashMap hashmapdata)
    {
    	try {
        		String endpointURL = hashmapdata.get("endpointURL").toString()
        		String Request = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Request")
        		def client = new SOAPClient(endpointURL)
        		log.info " InvokeSOAPRequest HashmapData: "+hashmapdata
        		if  (hashmapdata.containsKey ("proxyIP")==true) {
        			def proxyIP = hashmapdata.get("proxyIP").toString()
        			int proxyPort = Integer.parseInt(hashmapdata.get("proxyPort"))
        		 	def proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyIP, proxyPort))
 				 	client.httpClient.proxy = proxy
        		}
        		if (hashmapdata.containsKey ("keystore")==true){
        			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
        			client.httpClient.sslTrustStoreFile = projectPath + "/Certificates/"+hashmapdata.get("keystore").toString()
				client.httpClient.sslTrustStorePassword = hashmapdata.get("keystorepwd").toString()
				client.httpClient.sslTrustAllCerts = true
        		}
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");    
				//get start time				
				long starttime = System.currentTimeMillis();
				Date startResultdate = new Date(starttime);
				def startTime = sdf.format(startResultdate);
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "starttime", startTime.toString() );	
        		//Invoke Request
				def Response = client.send(Request)
				//Invoke end time
        		long endtime = System.currentTimeMillis();  
        			Date endResultdate = new Date(endtime);
				def endTime = sdf.format(endResultdate);
        		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "endtime", endTime.toString() );
				//calculate response time
				String  ResponseTime = (endtime - starttime).toString();
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Response", Response.getText())			

			    def FaultCode
			    if (Response.getText().toLowerCase().contains("fault")){FaultCode="true"} else {FaultCode="false"}
			    com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FaultCode", FaultCode)	
				//retreive Headers
			    HashMap Headers=new HashMap();
			    Headers.put("ResponseTime",ResponseTime);
			    com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "ResponseTime", ResponseTime)	
			    Headers.put("statusMessage",Response.httpResponse.statusCode);
			    com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "HTTPCode", Response.httpResponse.statusCode.toString())	
			    Headers.put("contentEncoding",Response.httpResponse.contentEncoding);
			    Headers.put("contentType",Response.httpResponse.contentType);
			    Headers.put("charset",Response.httpResponse.charset);
			    Headers.put("soapVersion",Response.soapVersion);
			    return Headers
			    com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
    	}
    	catch(Exception e) { 
			log.error(' Exception occurred in InvokeSOAPRequest. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" );
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "InvokeSOAPRequest failed. Exception: " +e.getMessage())}	
	finally {
		// Do nothing
		}
    }


//************************************************************************************************************************************************************
//Function Name 				: 	InvokeSOAPRequestviaProject
//Functionality to Achieve		: 	To invoke a SOAP service Request using SoapUI Client
//Inputs 						:	WSDLfile, InterfaceName,Operation and soap request XML  
//Outputs 					:	soap response xml
//************************************************************************************************************************************************************

	public static InvokeSOAPRequestviaProject(HashMap hashmapdata)
    {
    	try {
    			log.info " InvokeSOAPRequestviaProject HashmapData: "+hashmapdata
        		String wsdlfile = hashmapdata.get("wsdl").toString()
        		if (hashmapdata.containsKey("keystore")==true){
        			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
				def projectPath = groovyUtils.projectPath
        			SoapUI.settings.setString( SSLSettings.KEYSTORE, projectPath + "/Certificates/"+hashmapdata.get("keystore").toString())
				SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD,hashmapdata.get("keystorepwd").toString())
        		}
        		if (hashmapdata.containsKey("proxyIP")==true){
        			SoapUI.settings.setString( ProxySettings.HOST, hashmapdata.get("proxyIP").toString() )
				SoapUI.settings.setString( ProxySettings.PORT, Integer.parseInt(hashmapdata.get("proxyPort")) )
				SoapUI.getSettings().setBoolean(ProxySettings.ENABLE_PROXY,true)
        		}
        		else {
        			SoapUI.getSettings().setBoolean(ProxySettings.ENABLE_PROXY,false)
        		}
        		
        		if ((wsdlfile=="") || (wsdlfile==null)){log.error " Error in InvokeSOAPRequestviaProject. wsdlfile cannot be blank"}
        		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
				def projectPath = groovyUtils.projectPath;
				def wsdlfilepath = projectPath +  "/WSDL/" + wsdlfile;			
        		String InterfaceName = hashmapdata.get("InterfaceName").toString()
        		if ((InterfaceName=="") || (InterfaceName==null)) {log.error " Error in InvokeSOAPRequestviaProject. InterfaceName cannot be blank"}
					String OperationName = hashmapdata.get("OperationName").toString()
       			if ((OperationName=="") || (OperationName==null)) {log.error " Error in InvokeSOAPRequestviaProject. OperationName cannot be blank"}
					String Request = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Request")

        			//ImportWSDL
				testRunner.testCase.testSuite.project.importWsdl(wsdlfilepath.toString(),true)

				//Add Interface to Project
				def testSuite = testRunner.testCase.testSuite.project.addNewTestSuite(InterfaceName);

				//Add TestCase
				def testCase = testSuite.addNewTestCase(InterfaceName);
				testCase.setKeepSession(true);
				
				//Define Operation and Operation Configuration
				def operation = testRunner.testCase.testSuite.project.interfaces[InterfaceName].operations[OperationName];
				def config = com.eviware.soapui.impl.wsdl.teststeps.registry.WsdlTestRequestStepFactory.createConfig(operation,OperationName);

				//Add Operation
				def testStep = testCase.addTestStep(config);
				
				//Set Endpoint
        			if (hashmapdata.containsKey("endpointURL")==true) {
        				String endpointURL = hashmapdata.get("endpointURL").toString()
        				testStep.getProperty('Endpoint').setValue(endpointURL)
        			}
        			
				//Set Request
				testStep.getProperty('Request').setValue(Request)
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");    

				//get Start Time
				long starttime = System.currentTimeMillis()
				Date startResultdate = new Date(starttime);
				def startTime = sdf.format(startResultdate);
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "starttime", startTime.toString() );

				//Invoke Request
				testStep.run(testRunner, context)
				
				//get End Time
				long endtime = System.currentTimeMillis()
    				Date endResultdate = new Date(endtime);
				def endTime = sdf.format(endResultdate);
        			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "endtime", endTime.toString() );
        			
				HashMap Headers=new HashMap();
			     String ResponseTime = (endtime - starttime).toString();
				
				//Get Response and store in Global Variable
				String Response = testStep.getPropertyValue('Response').toString()
				log.info " Response: "+Response
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Response", Response )
				def FaultCode
				if (Response.toLowerCase().contains("fault")){FaultCode="true"} else {FaultCode="false"}
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FaultCode", FaultCode )
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "ResponseTime", ResponseTime )
				
				//Remove testSuite
				testRunner.testCase.testSuite.project.testSuites.each{
 				if(it.value.name.contains(InterfaceName)){
  					testRunner.testCase.testSuite.project.removeTestSuite(it.value)
 					}
				}

				//Remove Interface
				while (testRunner.testCase.testSuite.project.getInterfaceList().size() !=0) {
					List list = testRunner.testCase.testSuite.project.getInterfaceList()
					testRunner.testCase.testSuite.project.removeInterface(list[0])
				}
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
    	}
    	catch(Exception e) {
   		//Remove testSuite
		testRunner.testCase.testSuite.project.testSuites.each{
 		if(it.value.name.contains(hashmapdata.get("InterfaceName").toString())){
  				testRunner.testCase.testSuite.project.removeTestSuite(it.value)
 				}
			}

			//Remove Interface
			while (testRunner.testCase.testSuite.project.getInterfaceList().size() !=0) {
					List list = testRunner.testCase.testSuite.project.getInterfaceList()
					testRunner.testCase.testSuite.project.removeInterface(list[0])
				} 
			log.error(' Exception occurred in InvokeSOAPRequestviaProject. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "InvokeSOAPRequestviaProject failed. Exception: " +e.getMessage())}	
	finally {
    				SoapUI.settings.setString( SSLSettings.KEYSTORE, "")
				SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD,"")
    			}
    }
    
    
//************************************************************************************************************************************************************
//Function Name 				: 	ReadFile
//Functionality to Achieve		: 	To read a specific SOAP service Request
//Inputs 						:	filename
//Outputs 					:	NA
//************************************************************************************************************************************************************

	public static ReadFile(HashMap hashmapdata) {
		try{
			String xmlfilename = ""; 
			xmlfilename = hashmapdata.get("Filename").toString()

			//get the local folder
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
			def projectPath = groovyUtils.projectPath;
			def InputFolder = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "ServiceInfoFolder")
			def inputXMLPath
			if (InputFolder==null ||InputFolder=="") {inputXMLPath = projectPath +  "/inputXML/Default/"  +xmlfilename;}
			else {	inputXMLPath = projectPath +  "/inputXML/" +InputFolder+"/"+xmlfilename;}
			
			def strXml = new File(inputXMLPath).text
			def soapReq = strXml;
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Request", soapReq )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
	}
	catch(Exception e) { 
		log.error(' Exception occurred in ReadFile. Exception Details: ' +e.getMessage());
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "ReadFile failed. Exception: " +e.getMessage())
    		}
    	finally {
    			// do nothing
			
    			}	
    	
    }
    

//************************************************************************************************************************************************************
//Function Name 				: 	ApplydatatoInputreq
//Functionality to Achieve		: 	
//Inputs 						:	
//Outputs 					:	
//************************************************************************************************************************************************************
	public static  ApplydatatoInputreq (HashMap hashmapdata) { // creating  the  soap request

		try{
			
			def ParamNames = hashmapdata.ParamName;
			def ParamValues = hashmapdata.ParamValue;
			def ParamNameset = ParamNames.split(',');
			def ParamValueset = ParamValues.split(',');	
	
			for (int s=0;  s&lt;ParamNameset.size(); s++) {
			    String tag = ParamNameset[s];
				String value = ParamValueset[s];
				def soapReq = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Request") 
				def propertyString = '${'+ tag +'}' ;
				String soapRequest = soapReq.replace( propertyString, value)
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Request", soapRequest )
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
			}
	
		}
		
		catch(Exception e) { 
			log.error(' Exception occurred in ApplydatatoInputreq. Exception Details: ' +e.getMessage());
    			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "Applydata to Input Request failed. Exception: " +e.getMessage())}
    		finally {
		// Do nothing
		}
	}
    	
//************************************************************************************************************************************************************
//Function Name 					: 	AssertContains
//Functionality to Achieve			: 	To assert if a value is contained in the reponse XML
//Inputs 							:	string to be contained in response XML and response XML
//Outputs 						:	Pass or Fail as Function Value
//************************************************************************************************************************************************************
	public static  AssertContains(HashMap hashmapdata ){
		try{
			if (hashmapdata.size()>0){
			Iterator it = hashmapdata.entrySet().iterator();
   			while (it.hasNext()) {
   				Map.Entry pair = (Map.Entry)it.next();
        			String tag = pair.getKey().toString()
				String value = pair.getValue().toString()
				if (tag!="Action"){
					def soapRspns =  com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Response" )
			    if(soapRspns.contains(value) ) {
			    	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" ) 
			    	log.info " AssertContains assertion passed"
			    	} 
				else{
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" ); 
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertContains failed. Response does not contain "+value)
					log.info " AssertContains assertion failed"
					break;
					}
				}
   				}
				}
	}
	catch(Exception e) { 
		log.error(' Exception occurred in AssertContains. Exception Details: ' +e.getMessage());
    	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertContains failed. Exception: " +e.getMessage())}
    	finally {
		// Do nothing
		}
	}
		
//************************************************************************************************************************************************************
//Function Name 				: 	AssertNotContains
//Functionality to Achieve		: 	To assert if a value is not contained in the reponse XML
//Inputs 						:	string to be contained in response XML and response XML
//Outputs 					:	Pass or Fail as Function Value
//************************************************************************************************************************************************************

	public static  AssertNotContains(HashMap hashmapdata ){
		try {
				def resultAssertNotContains=""
				if (hashmapdata.size()>0){
				Iterator it = hashmapdata.entrySet().iterator();
   				while (it.hasNext()) {
   					Map.Entry pair = (Map.Entry)it.next();
        				String tag = pair.getKey().toString()
					String value = pair.getValue().toString()
					if (tag!="Action"){
						def soapRspns =  com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Response" )
			      		if(soapRspns.contains(value) ) {com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" );
						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertNotContains failed. Response contains "+ value) 
						log.error " AssertNotContains assertion failed"
						break;
						} 
						else{
							com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
							log.info " AssertNotContains assertion passed"
						}	
						}
   					}
				}
	}
	catch(Exception e) { 
		log.error(' Exception occurred in AssertNotContains. Exception Details: ' +e.getMessage());
    	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertNotContains failed. Exception: " +e.getMessage())}
    	finally {
		// Do nothing
		}
	}

//************************************************************************************************************************************************************
//Function Name 				: 	AssertXpath
//Functionality to Achieve		: 	To assert Xpath value with expected Path
//Inputs 						:	Xpath to be evaluated, expected Xpath Value and response XML
//Outputs 					:	Pass or Fail as Function Value
//************************************************************************************************************************************************************
	public  static  AssertXpath (HashMap hashmapdata )	{
		try{   
				def xpathToBeEvaluated = hashmapdata.get("XPath").toString()
				def expectedXPathValue = hashmapdata.get("ExpectedValue").toString()
				def soapRspns =  com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Response" )
				def holder = new XmlHolder(soapRspns)
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
				def projectPath = groovyUtils.projectPath;
				def NSInfofile = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "ServiceInfoFolder")
				File namespacefile = new File(projectPath +  "/NameSpaceInfo/" +NSInfofile+".txt")
				namespacefile.eachLine { line ->
					if( line.trim() ) {
									def(key,value) = line.split( '=' ).collect { it.trim() }
								     holder.declareNamespace (key,value); 
								    }
								}
				if (expectedXPathValue == holder.getNodeValue(xpathToBeEvaluated)) {
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )				
					log.info " XPath '"+xpathToBeEvaluated+"' assertion passed"
					}
		
				else {
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason","XPath '"+xpathToBeEvaluated+"' assertion failed.")				
					log.error " XPath '"+xpathToBeEvaluated+"' assertion Failed"
					}
				}
				catch(Exception e) { 
					log.error(' Exception occurred in AssertXpath. Exception Details: ' +e.getMessage());
    				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertNotContains failed. Exception: " +e.getMessage())}
    				finally {
					// Do nothing
				}
	}

//************************************************************************************************************************************************************
//Function Name 				: 	AssertSoapFault
//Functionality to Achieve		: 	To evaluate final result of every Assertion applied
//Inputs 						:	Assertion Evaluation String
//Outputs 					:	Pass or Fail as Function Value
//************************************************************************************************************************************************************

public static  AssertSoapFault (HashMap hashmapdata)	{
	try {
	def execute = hashmapdata.get("Execute").toString().toLowerCase()
		if (execute=="yes") { 
	def FaultCode = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "FaultCode") 
	if(FaultCode=="true") {
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
		log.info " AssertSoapFault assertion passed"
	}
	else {
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason","AssertionSoapFault  failed. SoapFault Exists in response");
		log.error " AssertSoapFault assertion failed"
	}
		}
}
	catch(Exception e) { 
		log.error(' Exception occurred in AssertionSoapFault. Exception Details: ' +e.getMessage());
    	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertionSoapFault failed. Exception: " +e.getMessage())}
    	
    	finally {
		// Do nothing
		}
	}

//************************************************************************************************************************************************************
//Function Name 				: 	AssertNotSoapFault
//Functionality to Achieve		: 	To evaluate final result of every Assertion applied
//Inputs 						:	Assertion Evaluation String
//Outputs 					:	Pass or Fail as Function Value
//************************************************************************************************************************************************************

public static  AssertNotSoapFault (HashMap hashmapdata)	{
	try{
		def execute = hashmapdata.get("Execute").toString().toLowerCase()
			if (execute=="yes") { 
		def FaultCode = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "FaultCode") 
		if(FaultCode=="true") {
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason","AssertionSoapFault  failed. SoapFault Exists in response");
			log.error " AssertNotSoapFault assertion failed"
		}
		else {
			 com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
			 log.info " AssertNotSoapFault assertion passed"
		}
			}
	}
	catch(Exception e) { 
		log.error(' Exception occurred in AssertionNotSoapFault. Exception Details: ' +e.getMessage());
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertionNotSoapFault failed. Exception: " +e.getMessage())}
    	finally {
		// Do nothing
		}
	}

//************************************************************************************************************************************************************
//Function Name 				: 	AssertHTTPCode
//Functionality to Achieve		: 	To evaluate final result of every Assertion applied
//Inputs 						:	Assertion Evaluation String
//Outputs 					:	Pass or Fail as Function Value
//************************************************************************************************************************************************************

public static  AssertHTTPCode (HashMap hashmapdata)	{
	try {
	def HTTPCode =  hashmapdata.get("HTTPCode").toString()
	def aCode = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "HTTPCode") 
	if(aCode.contains(HTTPCode)) {
	    com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
	    log.info ' AssertHTTPCode assertion passed';		
		}
	else {
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("TestCaseResult", "Fail")
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertHTTPCode failed. Actual Code is "+aCode+" and expected code is "+HTTPCode)
    		log.error ' AssertHTTPCode assertion failed';
    		}
	}
	catch(Exception e) { 
		log.error(' Exception occurred in AssertHTTPCode. Exception Details: ' +e.getMessage());
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertHTTPCode failed. Exception: " +e.getMessage())}
    	finally {
		// Do nothing
		}
	}

//************************************************************************************************************************************************************
//Function Name 				: 	AssertXMLagainstSchema
//Functionality to Achieve		: 	Assert xml file against XSD file
//Inputs 						:	XSD and XML
//Outputs 					:	Pass or Fail as Function Value
//************************************************************************************************************************************************************
public static  AssertXMLagainstSchema(HashMap hashmapdata){
	try{
		def resultAssertXMLagainstSchema=""
        	def Schema = hashmapdata.get("Schema").toString();
        	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
		def projectPath = groovyUtils.projectPath;
		def Schemapath = projectPath +  "/SchemaFiles/" + Schema;	
        	def RequestXML = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Request");
		Source Request=new StreamSource(new StringReader(RequestXML))
        	def ResponseXML = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Response") ; 
		Source Response=new StreamSource(new StringReader(ResponseXML))           
        	SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        	Schema schema = factory.newSchema(new File(Schemapath));
        	Validator validator = schema.newValidator();
        	try {
          	if (RequestXML!=""){
				validator.validate(Request); 
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
				log.info ' AssertXMLagainstSchema assertion passed';
            } 
            	if (ResponseXML!=""){
				validator.validate(Response); 
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
				log.info ' AssertXMLagainstSchema assertion passed';   
            }
		} 
		catch (Exception e) {     
            	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
            	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason","Request/Response.xml validation against Schema failed. Error: "+e);
            	log.error ' AssertXMLagainstSchema assertion failed';
            	} 
    }
    catch(Exception e) { 
		log.error(' Exception occurred in AssertXMLagainstSchema. Exception Details: ' +e.getMessage());
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AssertXMLagainstSchema failed. Exception: " +e.getMessage())
    		log.error ' AssertXMLagainstSchema assertion failed';
    	}
    	finally {
		// Do nothing
		}
	}
		     
//************************************************************************************************************************************************************
//Function Name 					: 	fetchnstorefromDB
//Functionality to Achieve			: 	Fetchvalue from database and store in Dictornary
//Inputs 							:	sqlQuery, expectedValue,DBInfo
//Outputs 						:	Pass or Fail as Function Value
//************************************************************************************************************************************************************
public static fetchnstorefromDB(HashMap hashmapdata)	{
    try{
		def database = hashmapdata.get("Database").toString();
		def sqlQuery = hashmapdata.get("Query").toString();
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;

		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);

		//Read Services File path location properties
		String sConfig = projectPath + "/Config/DatabaseProperties.properties"
		def DatabaseProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		def DatabaseType="";def sqlusername="";def sqlpassword="";def host="";def portnumber="";def serviceName=""; def databaseName=""

		//get values from properties file
		DatabaseType = DatabaseProperties.get(database+"_DatabaseType" ).trim()
		sqlusername = DatabaseProperties.get(database+"_UserName" ).trim()
		sqlpassword = DatabaseProperties.get(database+"_Password" ).trim()
		host = DatabaseProperties.get(database+"_Host" ).trim()
		portnumber = DatabaseProperties.get(database+"_Port" ).trim()
		serviceName = DatabaseProperties.get(database+"_ServiceName").trim()
		databaseName = DatabaseProperties.get(database+"_DatabaseName").trim()
		scripts.testCases["ScriptLibrary"].testSteps["KeyWordFunctions"].run(testRunner, context);
		
		//Check all values are present
		if ((DatabaseType=="") ||(DatabaseType==null)) {
			if ((sqlusername=="")||(sqlusername==null)){
				if ((sqlpassword=="")||(sqlpassword==null)){
					if((host=="")||(host==null)){
						if ((portnumber=="")||(portnumber==null)){
							if((sqlQuery=="")||(sqlQuery==null)){
    								com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    								com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "fetchnstorefromDB failed. sqlQuery missing in Input")
    								log.error ' fetchnstorefromDB failed';
    								}
							com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    							com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "fetchnstorefromDB failed PortNumber missing in properties file")
    							log.error ' fetchnstorefromDB failed';
    							}
    						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "fetchnstorefromDB failed Host missing in properties file")
    						log.error ' fetchnstorefromDB failed';
						}
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "fetchnstorefromDB failed sqlpassword missing in properties file")		
    					log.error ' fetchnstorefromDB failed';
					}
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "fetchnstorefromDB failed sqlusername missing in properties file")		
    				log.error ' fetchnstorefromDB failed';
				}
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "fetchnstorefromDB failed DatabaseType missing in properties file")			
    			log.error ' fetchnstorefromDB failed';
			}
			else{
				switch (DatabaseType.toLowerCase()){
					
					case "oracle":
					if ((serviceName!="") ||(serviceName!=null)) {
						def sql = Sql.newInstance("jdbc:oracle:thin:"+sqlusername+"/"+sqlpassword+"@//"+host+":"+portnumber+"/"+serviceName)
						HashMap row = sql.firstRow(sqlQuery)
						log.info ' Query executed successfully';
						 for (String col : row.keySet()) {
						 	HashMap storeinDictDataMap = new HashMap();
							storeinDictDataMap.put("variable",col)
							storeinDictDataMap.put("value",row.get(col))
							context.KeywordLibraries.StoreInDictionary(storeinDictDataMap)
    						}
					}
					else {
						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
		    				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "fetchnstorefromDB not run. Servicename missing for Oracle Query")
					}
					break;
					
					case "mssql":
						def dbpath="jdbc:sqlserver://"+host+":"+portnumber
						def dbusr = sqlusername
						def dbpwd = sqlpassword
						def dbdriver = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
						def sql = Sql.newInstance(dbpath, dbusr, dbpwd, dbdriver)
						HashMap row = sql.firstRow(sqlQuery)
						log.info ' Query executed successfully';
						 for (String col : row.keySet()) {
						 	HashMap storeinDictDataMap = new HashMap();
							storeinDictDataMap.put("variable",col)
							storeinDictDataMap.put("value",row.get(col))
							context.KeywordLibraries.StoreInDictionary(storeinDictDataMap)
    						}
    						
					break;
					
					case "db2":
					break;

					case "mysql":
					break;
					
					default:
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "fetchnstorefromDB failed. Incorrect QueryType mentioned")
					log.error ' fetchnstorefromDB failed';
					break;
				}
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" ) 
			}
    }
    catch(Exception e) { 
		log.error(' Exception occurred in fetchnstorefromDB. Exception Details: ' +e.getMessage());
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "fetchnstorefromDB failed. Exception: " +e.getMessage())}
    	finally {
		// Do nothing
		}
	}

//************************************************************************************************************************************************************
//Function Name 					: 	AlterDB
//Functionality to Achieve			: 	Insert/Update/Delete from database 
//Inputs 							:	sqlQuery, DBInfo
//Outputs 							:	Pass or Fail as Function Value
//************************************************************************************************************************************************************
public static AlterDB(HashMap hashmapdata)	{
    try{
		def database = hashmapdata.get("Database").toString();
		def sqlQuery = hashmapdata.get("Query").toString();
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;

		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);

		//Read Services File path location properties
		String sConfig = projectPath + "/Config/DatabaseProperties.properties"
		def DatabaseProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		def DatabaseType="";def sqlusername="";def sqlpassword="";def host="";def portnumber="";def serviceName=""; def databaseName=""

		//get values from properties file
		DatabaseType = DatabaseProperties.get(database+"_DatabaseType" ).trim()
		sqlusername = DatabaseProperties.get(database+"_UserName" ).trim()
		sqlpassword = DatabaseProperties.get(database+"_Password" ).trim()
		host = DatabaseProperties.get(database+"_Host" ).trim()
		portnumber = DatabaseProperties.get(database+"_Port" ).trim()
		serviceName = DatabaseProperties.get(database+"_ServiceName").trim()
		databaseName = DatabaseProperties.get(database+"_DatabaseName").trim()
		scripts.testCases["ScriptLibrary"].testSteps["KeyWordFunctions"].run(testRunner, context);
		
		//Check all values are present
		if ((DatabaseType=="") ||(DatabaseType==null)) {
			if ((sqlusername=="")||(sqlusername==null)){
				if ((sqlpassword=="")||(sqlpassword==null)){
					if((host=="")||(host==null)){
						if ((portnumber=="")||(portnumber==null)){
							if((sqlQuery=="")||(sqlQuery==null)){
    								com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    								com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "AlterDB failed. sqlQuery missing in Input")
    								log.error ' AlterDB failed';
    								}
							com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    							com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "AlterDB failed PortNumber missing in properties file")
    							log.error ' AlterDB failed';
    							}
    						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "AlterDB failed Host missing in properties file")
    						log.error ' AlterDB failed';
						}
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "AlterDB failed sqlpassword missing in properties file")		
    					log.error ' AlterDB failed';
					}
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestcaseResult", "Fail" )
    				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "AlterDB failed sqlusername missing in properties file")		
    				log.error ' AlterDB failed';
				}
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "FailureReason", "AlterDB failed DatabaseType missing in properties file")			
    			log.error ' AlterDB failed';
			}
			else{
				switch (DatabaseType.toLowerCase()){
					
					case "oracle":
					if ((serviceName!="") ||(serviceName!=null)) {
						def sql = Sql.newInstance("jdbc:oracle:thin:"+sqlusername+"/"+sqlpassword+"@//"+host+":"+portnumber+"/"+serviceName)
						sql.execute(sqlQuery) 
						log.info 'Insert/Update/Delete Query executed successfully';
					}
					else {
						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
		    				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AlterDB not run. Servicename missing for Oracle Query")
					}
					break;
					
					case "mssql":
						def dbpath="jdbc:sqlserver://"+host+":"+portnumber
						def dbusr = sqlusername
						def dbpwd = sqlpassword
						def dbdriver = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
						def sql = Sql.newInstance(dbpath, dbusr, dbpwd, dbdriver)
						sql.execute(sqlQuery)
						log.info 'Insert/Update/Delete Query executed successfully';
					break;
					
					case "db2":
					break;

					case "mysql":
					break;
					
					default:
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
					com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AlterDB failed. Incorrect QueryType mentioned")
					log.error ' AlterDB failed';
					break;
				}
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" ) 
			}
    }
    catch(Exception e) { 
		log.error(' Exception occurred in AlterDB. Exception Details: ' +e.getMessage());
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
    		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "AlterDB failed. Exception: " +e.getMessage())}
    	finally {
		// Do nothing
		}
	}


//************************************************************************************************************************************************************
//Function Name 			     : 	fetchnstorefromXML
//Functionality to Achieve		: 	To fetch a particular node value and store it in a variable of hashmap
//Inputs 						:	Xpath
//Outputs 					:	hashMap variable with node and and value 
//************************************************************************************************************************************************************    
	public static fetchnstorefromXML(HashMap hashmapdata){
		try{
			String response = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Response");
			def soapRspns =  com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Response" )
			def holder = new XmlHolder(soapRspns)
			def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
			def projectPath = groovyUtils.projectPath;
			def NSInfofile = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "ServiceInfoFolder")
			File namespacefile = new File(projectPath +  "/NameSpaceInfo/" +NSInfofile+".txt")
			namespacefile.eachLine { line ->
				if( line.trim() ) {
								def(key,value) = line.split( '=' ).collect { it.trim() }
							     holder.declareNamespace (key,value); 
							    }
				}
			if(hashmapdata.size()>0){
				Iterator it = hashmapdata.entrySet().iterator(); 
				while(it.hasNext()){
					Map.Entry pair = (Map.Entry)it.next();
					def paramSet = pair.toString().split('=');		
					String tag = paramSet[0];
					String value = paramSet[1];
					if(tag!="Action"){
						def actualvalue=holder.getNodeValue(value)
						HashMap storeinDictDataMap = new HashMap();
						storeinDictDataMap.put("variable",tag)
						storeinDictDataMap.put("value",actualvalue)
						context.KeywordLibraries.StoreInDictionary(storeinDictDataMap)
						com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" ) 		
					}
				}
			}
		}
		catch(Exception e){
			log.error(' Exception occurred in fetchAndStoreInDictionary. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "fetchfromXMLnStoreInDictionary failed. Exception: " +e.getMessage())
			}
		finally {
		// Do nothing
		}
		}
		
//************************************************************************************************************************************************************
//Function Name 			     : 	comparevalues
//Functionality to Achieve		: 	To fetch a particular value from Dictionary,property file,datasheet and compare
//Inputs 						:	
//Outputs 					:	Comparision Results
//************************************************************************************************************************************************************    
	public static comparevalues(HashMap hashmapdata){
		try{
			def Parameters = hashmapdata.get("Parameters").toString();
			def paramSet = Parameters.split(',');
			if (paramSet[0].equalsIgnoreCase(paramSet[1])) {
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
				log.info  " Compare Values successful"
			}
			else {
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "comparevalues failed. Values compared are "+paramSet[0]+" and "+paramSet[1])	
				log.info  " Compare Values Failed"
			}

			}
		catch(Exception e){
			log.error(' Exception occurred in comparevalues. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "Compare Values failed. Exception: " +e.getMessage())
			}
		finally {
		// Do nothing
		}
		}

//************************************************************************************************************************************************************
//Function Name 			     : 	StoreInDictionary
//Functionality to Achieve		: 	To fetch a particular node value and store it in a variable of hashmap
//Inputs 						:	Xpath
//Outputs 					:	hashMap variable with node and and value 
//************************************************************************************************************************************************************    
	public static StoreInDictionary(HashMap hashmapdata){
		try{
			def variable = hashmapdata.get("variable").toString();
			def value = hashmapdata.get("value").toString();
			def currDict=com.eviware.soapui.SoapUI.globalProperties.getPropertyValue("Dictionary")
			def inputtoDict=currDict+";"+variable+"="+value; inputtoDict=inputtoDict.toString()
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("Dictionary",inputtoDict)
			log.info " Value for "+value+" retrieved and stored in  " +variable+ " in Dictionary"			
			}
		catch(Exception e){
			log.error(' Exception occurred in StoreInDictionary. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "StoreInDictionary failed. Exception: " +e.getMessage())
			}
		finally {
		// Do nothing
		}
		}


//************************************************************************************************************************************************************
//Function Name 				: 	invokeRestService
//Functionality to Achieve		: 	To evaluate ivoke rest Service
//Inputs 						:	
//Outputs 					:	Response Code and Response Message
//************************************************************************************************************************************************************

public static invokeRestService (HashMap hashmapdata)	{
	String restOperation = hashmapdata.get("restOperation").toString()
	try {
		//code to get URL string start
		def urlString = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "RestUrlString") 
		//code to get URL string stop
		
  		URL url = new URL(urlString);
  		log.info urlString
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setDoOutput(true);
		//code to get Operation start
		conn.setRequestMethod(restOperation);
		log.info restOperation
		//code to get Operation stop
		
		//code to add headers start		
		def headValString = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "RestHeader")
		def valValString = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "RestHeaderValues")
		if (null!=headValString){
			def headerVal = headValString.split(",")
			def valueVal = valValString.split(",")
			for (int i = 0; i &lt;valueVal.size(); i++) {
   			conn.setRequestProperty(headerVal[i].toString().trim(), valueVal[i].toString().trim());
			}
		}
		//code to add headers end
		
		//code to add Auth headers start		
		def authHeadValString = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "RestAuthHeaderName")
		def authValString = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "RestAuthHeaderValue")
		if (null!=authHeadValString){
		def authHeaderVal = authHeadValString.split(",")
		def authValueVal = authValString.split(",")
			for (int i = 0; i &lt;authValueVal.size(); i++) {		
				conn.setRequestProperty(authHeaderVal[i].toString().trim(), authValueVal[i].toString().trim());
			}
		}
		
		String restResponseCode = conn.getResponseCode()
		//code to get response code from server stop

		//code to get response message from server start
		BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		String output;
		while ((output = br.readLine()) != null) {
			log.info(output);
		}
		//code to get response message from server stop
		conn.disconnect();
		//putting header properties back to null
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestHeader", null)
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestHeaderValues", null)
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestAuthHeaderName", null)
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestAuthHeaderValue", null)
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
		
	  } 
	  catch(Exception e){
			log.error(' Exception occurred in invokeRestService. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "invokeRestService failed. Exception: " +e.getMessage())
			}
	  finally {
		// Do nothing
		}
		}

//************************************************************************************************************************************************************
//Function Name 				: 	formRestResourceURI
//Functionality to Achieve		: 	To form Rest Resource URI
//Inputs 						:	
//Outputs 					:	Rest Resource URI
//************************************************************************************************************************************************************
	public static formRestResourceURI(HashMap hashmapData){
	try{
		String server = "";
		String port = "";
		String resourceString = "";
		String endPoint = "";
		String resource = "";
		 if(hashmapData.size()>0){
				Iterator it = hashmapData.entrySet().iterator();
				while(it.hasNext()){
					Map.Entry pair = (Map.Entry)it.next();
					def paramSet = pair.toString().split('=');		
					String tag = paramSet[0];
					String value = paramSet[1];
					if(tag!="Action"){
						 switch(tag){
						 	case "Server" :
						 		server = value;
						 		break;
						 	case "Port" :
						 		port = value;
						 		break;
						 	case "Resource" :
						 		resourceString = value;
						 		break;
						 	default:
						 		break;
						 }
					}
				}
			}
			if(port == ""){
				endPoint = server;
			}
			else if(server == ""){
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "Server Name is mandatory")
				}			
			else{
		 		endPoint = server + ":" + port;
			}
			
			def resourceSet = resourceString.split('[, /-]');
			resourceSet.each{
				resource = resource + "/" + it;
			}
			if(endPoint == ""){
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
				com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "Server and Port are empty")
				}
			def parameterString = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "createInputParameterString");
			if(parameterString == null){
				String URI = "http://" + endPoint + resource;
			}
			else{
				String URI = "http://" + endPoint + resource +"?"+ parameterString;
			}

		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestUrlString", URI)
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
	}
	catch(Exception e){
			log.error(' Exception occurred in formRestResourceURI. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "formRestResourceURI failed. Exception: " +e.getMessage())
			}
	finally {
		// Do nothing
		}
		}

//************************************************************************************************************************************************************
//Function Name 				: 	addHeaderToRestRequest
//Functionality to Achieve		: 	To add Header To Rest Request
//Inputs 						:	
//Outputs 					:	Header String and Header Values String
//************************************************************************************************************************************************************
	public static addHeaderToRestRequest(HashMap hashmapdata){
	try{
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestHeaderName", hashmapdata.HeaderName);
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestHeaderValue", hashmapdata.HeaderValue);
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
		}
	catch(Exception e){
			log.error(' Exception occurred in addHeaderToRestRequest. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "addHeaderToRestRequest failed. Exception: " +e.getMessage())
			}
	finally {
		// Do nothing
		}
		}
	
//************************************************************************************************************************************************************
//Function Name 				: 	addAuthHeaderToRestRequest
//Functionality to Achieve		: 	To add Header To Rest Request
//Inputs 						:	
//Outputs 					:	Auth Header String and Auth Header Values
//************************************************************************************************************************************************************
	public static addAuthHeaderToRestRequest(HashMap hashmapdata){
	try{
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestAuthHeaderName", hashmapdata.AuthHeaderName);
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "RestAuthHeaderValue", hashmapdata.AuthHeaderValue);
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
		}
	catch(Exception e){
			log.error(' Exception occurred in addAuthHeaderToRestRequest. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "addAuthHeaderToRestRequest failed. Exception: " +e.getMessage())
		}
	finally {
		// Do nothing
		}
	}
	
//************************************************************************************************************************************************************
//Function Name 					: 	createInputParameterString
//Functionality to Achieve			: 	
//Inputs 							:	
//Outputs 						:	
//************************************************************************************************************************************************************

	public static createInputParameterString(HashMap hashmapdata){
	try{
		def ParamNames = hashmapdata.ParamName;
		def ParamValues = hashmapdata.ParamValue;
		def ParamNameset = ParamNames.split(',');
		def ParamValueset = ParamValues.split(',');	
		def parameterString = "";
		for (int s=0;  s&lt;ParamNameset.size(); s++) {
			if(s>0){
					parameterString = parameterString + " &amp; ";
			}
			String tag = ParamNameset[s];
			String value = ParamValueset[s];
			parameterString = parameterString  +tag +"=" +value;
		}
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createInputParameterString",parameterString);
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
	}
	catch(Exception e){
			log.error(' Exception occurred in createInputParameterString. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "createInputParameterString failed. Exception: " +e.getMessage())
			}
	finally {
		// Do nothing
		}
	}
	
//************************************************************************************************************************************************************
//Function Name 				: 	InvokeCustomFunction
//Functionality to Achieve		: 	To invoke respective keyword function
//Inputs 						:	HashMap
//Outputs 					:	Result
//************************************************************************************************************************************************************
 public static  InvokeCustomFunction(hashmapdata) {
 	try {
		def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["CustomFunctions"].run(testRunner, context);
		def myFx=hashmapdata.get("CustomFunction"); 
		context.CustomLibraries."$myFx"(hashmapdata);
	}
    	catch(Exception e) { 
			log.error(' Exception occurred in InvokeCustomFunction. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "InvokeCustomFunction failed. Exception: " +e.getMessage())}	
	finally {
		// Do nothing
		}

    }

//************************************************************************************************************************************************************
//Function Name 				: 	WebsphereMQPublishMessage
//Functionality to Achieve		: 	To publish message to MQ
//Inputs 						:	HashMap
//Outputs 					:	Pass/Fail
//************************************************************************************************************************************************************
/* public static  WebsphereMQPublishMessage(hashmapdata) {
 	try {
		def MQ = hashmapdata.get("MQ").toString();
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;
		
		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);
		
		//Read Services File path location properties
		String sConfig = projectPath + "/Config/MessageQueueProperties.properties"
		def MQProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		def propIQueue="";def propIHostname="";def propIPort="";def propIChannel="";def propIQM="";

		//get values from properties file
		propIHostname = MQProperties.get(MQ+"_PublishHost" ).trim()
		propIPort = MQProperties.get(MQ+"_PublishPort" ).trim()
		propIChannel = MQProperties.get(MQ+"_PublishChannel" ).trim()
		propIQM = MQProperties.get(MQ+"_PublishQueueManager" ).trim()
		propIQueue = MQProperties.get(MQ+"_PublishQueue" ).trim()
		String Request = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Request")
		scripts.testCases["ScriptLibrary"].testSteps["KeyWordFunctions"].run(testRunner, context);
		
		//Set up the environment
		def queueManager = new MQQueueManager(propIQM)
		MQEnvironment.hostname = propIHostname
		MQEnvironment.port = Integer.parseInt(propIPort)
		MQEnvironment.channel = propIChannel

		//Put message in Publish queue
		def putMsg = new MQMessage();
		int putOpenOpts = MQC.MQOO_OUTPUT | MQC.MQOO_FAIL_IF_QUIESCING;
		def putQ = queueManager.accessQueue(propIQueue, putOpenOpts);
		putMsg.writeString(Request)
		def pmo = new MQPutMessageOptions();
		putQ.put(putMsg, pmo);
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
		putQ.close()
	}
    	catch(Exception e) { 
			log.error(' Exception occurred in InvokeCustomFunction. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "InvokeCustomFunction failed. Exception: " +e.getMessage())}	
	finally {
		// Do nothing
		}

    }*/

//************************************************************************************************************************************************************
//Function Name 				: 	WebsphereMQSubscribeMessage
//Functionality to Achieve		: 	To publish message to MQ
//Inputs 						:	HashMap
//Outputs 					:	Pass/Fail
//************************************************************************************************************************************************************
 /*public static  WebsphereMQSubscribeMessage(hashmapdata) {
 	try {
		def MQ = hashmapdata.get("MQ").toString();
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;
		
		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);
		
		//Read Services File path location properties
		String sConfig = projectPath + "/Config/MessageQueueProperties.properties"
		def MQProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		def propOQueue="";def propOHostname="";def propOPort="";def propOChannel="";def propOQM="";

		//get values from properties file
		propOHostname = MQProperties.get(MQ+"_SubscribeHost" ).trim()
		propOPort = MQProperties.get(MQ+"_SubscribePort" ).trim()
		propOChannel = MQProperties.get(MQ+"_SubscribeChannel" ).trim()
		propOQM = MQProperties.get(MQ+"_SubscribeQueueManager" ).trim()
		propOQueue = MQProperties.get(MQ+"_SubscribeQueue" ).trim()
		scripts.testCases["ScriptLibrary"].testSteps["KeyWordFunctions"].run(testRunner, context);
		
		//Set up the environment
		MQEnvironment.hostname = propOHostname
		MQEnvironment.port = Integer.parseInt(propOPort)
		MQEnvironment.channel = propOChannel

		//setting Subscribe Queue Manager
		def queueManager = new MQQueueManager(propOQM)
		def getMsg = new MQMessage();
		int getOpenOpts = MQC.MQGMO_WAIT;
		MQGetMessageOptions gmo = new MQGetMessageOptions();
		def getQ = queueManager.accessQueue(propOQueue, getOpenOpts);
		gmo.waitInterval = 5000;
		getQ.get(getMsg, gmo);
		def Response = getMsg.readString(getMsg.getMessageLength())
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Response",Response.toString())
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
		getQ.close()
	}
    	catch(Exception e) { 
			log.error(' Exception occurred in InvokeCustomFunction. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "InvokeCustomFunction failed. Exception: " +e.getMessage())}	

	finally {
		// Do nothing
		}

    }*/

 //************************************************************************************************************************************************************
//Function Name 				: 	WebsphereMQPublishandSubscribeMessage
//Functionality to Achieve		: 	To publish message to MQ
//Inputs 						:	HashMap
//Outputs 					:	Pass/Fail
//************************************************************************************************************************************************************
 /*public static  WebsphereMQPublishandSubscribeMessage(hashmapdata) {
 	try {
		def MQ = hashmapdata.get("MQ").toString();
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;
		
		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);
		
		//Read Services File path location properties
		String sConfig = projectPath + "/Config/MessageQueueProperties.properties"
		def MQProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		def propIQueue="";def propIHostname="";def propIPort="";def propIChannel="";def propIQM="";
		def propOQueue="";def propOHostname="";def propOPort="";def propOChannel="";def propOQM="";

		//get values from properties file for publish
		propIHostname = MQProperties.get(MQ+"_PublishHost" ).trim()
		propIPort = MQProperties.get(MQ+"_PublishPort" ).trim()
		propIChannel = MQProperties.get(MQ+"_PublishChannel" ).trim()
		propIQM = MQProperties.get(MQ+"_PublishQueueManager" ).trim()
		propIQueue = MQProperties.get(MQ+"_PublishQueue" ).trim()
		String Request = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Request")
		
		//Set up the environment
		def IqueueManager = new MQQueueManager(propIQM)
		MQEnvironment.hostname = propIHostname
		MQEnvironment.port = Integer.parseInt(propIPort)
		MQEnvironment.channel = propIChannel

		//Put message in Publish queue
		def putMsg = new MQMessage();
		int putOpenOpts = MQC.MQOO_OUTPUT | MQC.MQOO_FAIL_IF_QUIESCING;
		def putQ = IqueueManager.accessQueue(propIQueue, putOpenOpts);
		putMsg.writeString(Request)
		def pmo = new MQPutMessageOptions();
		putQ.put(putMsg, pmo);
		putQ.close()
		
		//get values from properties file for Subsribe
		propOHostname = MQProperties.get(MQ+"_SubscribeHost" ).trim()
		propOPort = MQProperties.get(MQ+"_SubscribePort" ).trim()
		propOChannel = MQProperties.get(MQ+"_SubscribeChannel" ).trim()
		propOQM = MQProperties.get(MQ+"_SubscribeQueueManager" ).trim()
		propOQueue = MQProperties.get(MQ+"_SubscribeQueue" ).trim()
		scripts.testCases["ScriptLibrary"].testSteps["KeyWordFunctions"].run(testRunner, context);
		
		//Set up the environment
		MQEnvironment.hostname = propIHostname
		MQEnvironment.port = Integer.parseInt(propIPort)
		MQEnvironment.channel = propIChannel

		//setting Subscribe Queue Manager
		def OqueueManager = new MQQueueManager(propOQM)
		def getMsg = new MQMessage();
		int getOpenOpts = MQC.MQGMO_WAIT;
		MQGetMessageOptions gmo = new MQGetMessageOptions();
		def getQ = OqueueManager.accessQueue(propOQueue, getOpenOpts);
		gmo.waitInterval = 5000;
		getQ.get(getMsg, gmo);
		def Response = getMsg.readString(getMsg.getMessageLength())
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Response",Response.toString())
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
		getQ.close()
	}
    	catch(Exception e) { 
			log.error(' Exception occurred in InvokeCustomFunction. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "InvokeCustomFunction failed. Exception: " +e.getMessage())}	
	finally {
		// Do nothing
		}

    }*/
//************************************************************************************************************************************************************
//Function Name 				: 	TibcoEMSPublishJMS
//Functionality to Achieve		: 	To publish message to TibcoEMS
//Inputs 						:	HashMap
//Outputs 						:	Pass/Fail
//************************************************************************************************************************************************************
 /*public static  TibcoEMSPublishJMS(hashmapdata) {
 	try {
		def QueueConnectionFactory queueconnectionfactory;
		def QueueConnection queueconnection;
		def QueueSession queuesession;
		def QueueSender queuesender;
		def Queue queue;
		def TextMessage message;
		
		def MQ = hashmapdata.get("MQ").toString();
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;
		
		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);
		
		//Read Services File path location properties
		String sConfig = projectPath + "/Config/MessageQueueProperties.properties"
		def MQProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		def tibcoserverUrl= ""
		def userName = ""
		def password = ""
		
		//get values from properties file for publish
		tibcoserverUrl = MQProperties.get(MQ+"_tibcoserverUrl" ).trim()
		userName = MQProperties.get(MQ+"_userName" ).trim()
		password = MQProperties.get(MQ+"_password" ).trim()
		String Request = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Request")
		def QUEUE = hashmapdata.get("QUEUE").toString();
		
		//initiate
		queueconnectionfactory = new TibjmsQueueConnectionFactory(serverUrl);
		queueconnection = queueconnectionfactory.createQueueConnection(userName, password);
		queuesession = queueconnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
		queue = queuesession.createQueue(QUEUE);
		queuesender = queuesession.createSender(queue);
		message = queuesession.createTextMessage();
		queueconnection.start();

		message.setText(Request);
		queuesender.send(message);

		queuesender.close();
		queuesession.close();
		queueconnection.close();
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
	}
    	catch(Exception e) { 
			log.error(' Exception occurred in WeblogicPublish. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "WeblogicPublish failed. Exception: " +e.getMessage())}	
	finally {
		// Do nothing
		}

    }*/

//************************************************************************************************************************************************************
//Function Name 				: 	TibcoEMSSubscribeJMS
//Functionality to Achieve		: 	To Subscribe message in TibcoEMS
//Inputs 						:	HashMap
//Outputs 					:	Pass/Fail
//************************************************************************************************************************************************************
 /*public static  TibcoEMSSubscribeJMS(hashmapdata) {
 	try {
		def QueueConnectionFactory queueconnectionfactory;
		def QueueConnection queueconnection;
		def QueueSession queuesession;
		def QueueReceiver queuereceiver ;
		def Queue queue;
		def TextMessage message;
		
		def MQ = hashmapdata.get("MQ").toString();
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;
		
		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);
		
		//Read Services File path location properties
		String sConfig = projectPath + "/Config/MessageQueueProperties.properties"
		def MQProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		def tibcoserverUrl= ""
		def userName = ""
		def password = ""
		
		//get values from properties file for publish
		tibcoserverUrl = MQProperties.get(MQ+"_tibcoserverUrl" ).trim()
		userName = MQProperties.get(MQ+"_userName" ).trim()
		password = MQProperties.get(MQ+"_password" ).trim()		
		def QUEUE = hashmapdata.get("QUEUE").toString();
				
		//initiate
		queueconnectionfactory = new TibjmsQueueConnectionFactory(serverUrl);
		queueconnection = queueconnectionfactory.createQueueConnection(userName, password);
		queuesession = queueconnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
		queue = session.createQueue(QUEUE);
		queuereceiver = queuesession.createReceiver(queue);
		queueconnection.start();

		 TextMessage msg = (TextMessage)queuereceiver.receive();    
		 String Response = com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Response",msg.getText())
		
		queuereceiver.close();
		queuesession.close();
		queueconnection.close();
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
	}
    	catch(Exception e) { 
			log.error(' Exception occurred in WeblogicPublish. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "WeblogicPublish failed. Exception: " +e.getMessage())}	
	finally {
		// Do nothing
		}

    }*/

//************************************************************************************************************************************************************
//Function Name 				: 	TibcoEMSPublishandSubscribeJMS
//Functionality to Achieve		: 	To publish and Subscribe message in TibcoEMS
//Inputs 						:	HashMap
//Outputs 					:	Pass/Fail
//************************************************************************************************************************************************************
 /*public static  TibcoEMSPublishandSubscribeJMS(hashmapdata) {
 	try {
		def QueueConnectionFactory queueconnectionfactory;
		def QueueConnection queueconnection;
		def QueueSession queuesession;
		def QueueSender queuesender
		def QueueReceiver queuereceiver ;
		def Queue pqueue;
		def Queue rqueue;
		def TextMessage message;
		
		def MQ = hashmapdata.get("MQ").toString();
		//Read the Service XLS file
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) ;
		def projectPath = groovyUtils.projectPath;
		
		//Set GenericLibrary Context and call functions
     	def scripts = testRunner.testCase.testSuite.project.testSuites["Library"];
		scripts.testCases["ScriptLibrary"].testSteps["EnterpriseFunctions"].run(testRunner, context);
		
		//Read Services File path location properties
		String sConfig = projectPath + "/Config/MessageQueueProperties.properties"
		def MQProperties = context.GenericLibraries.readDatafromConfig(sConfig)
		def tibcoserverUrl= ""
		def userName = ""
		def password = ""
		
		//get values from properties file for publish
		tibcoserverUrl = MQProperties.get(MQ+"_tibcoserverUrl" ).trim()
		userName = MQProperties.get(MQ+"_userName" ).trim()
		password = MQProperties.get(MQ+"_password" ).trim()	
		String Request = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "Request")
		def pQUEUE = hashmapdata.get("pQUEUE").toString();
		def rQUEUE = hashmapdata.get("rQUEUE").toString();
		
		//initiate
		queueconnectionfactory = new TibjmsQueueConnectionFactory(serverUrl);
		queueconnection = queueconnectionfactory.createQueueConnection(userName, password);
		queuesession = queueconnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
		pqueue = queuesession.createQueue(pqueue);
		queuesender = queuesession.createSender(pqueue);
		message = queuesession.createTextMessage();
		queueconnection.start();

		message.setText(Request);
		queuesender.send(message);

		rqueue = queuesession.createQueue(rqueue);
		queuereceiver = queuesession.createReceiver(rqueue);
		queueconnection.start();

		TextMessage msg = (TextMessage)queuereceiver.receive();    
		String Response = com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "Response",msg.getText())

		queuesender.close();
		queuereceiver.close();
		queuesession.close();
		queueconnection.close();
		com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Pass" )
	}
    	catch(Exception e) { 
			log.error(' Exception occurred in WeblogicPublish. Exception Details: ' +e.getMessage());
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "TestCaseResult", "Fail" )
			com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("FailureReason", "WeblogicPublish failed. Exception: " +e.getMessage())}	
	finally {
		// Do nothing
		}

    }*/
    
}</script></con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:properties>
    <con:property>
      <con:name>Dictonary</con:name>
      <con:value>;ActionResultCode=00</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer>
    <con:crypto>
      <con:source>C:/Users/skocheri/Documents/SoapUI Workspace/SoapUI Keyword Framework_V20/Certificates/key_testclient.jks</con:source>
      <con:password>testclient</con:password>
      <con:type>TRUSTSTORE</con:type>
    </con:crypto>
  </con:wssContainer>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/><con:sensitiveInformation/>
</con:soapui-project>